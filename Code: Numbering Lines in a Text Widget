""" 
Tkinter adding line number to text widget

Inspired by: https://stackoverflow.com/questions/16369470/tkinter-adding-line-number-to-text-widget

Display line number for the Text widget in an adjacent frame.
Refactored to work with Notepad app.
""" 
    
from tkinter import *


def create_text_line_numbers(canvas, text_widget):
    def redraw(*args):
        # Redraw line numbers
        canvas.delete("all")

        i = text_widget.index("@0,0")
        while True:
            dline = text_widget.dlineinfo(i)
            if dline is None:
                break
            y = dline[1]
            linenum = str(i).split(".")[0]
            canvas.create_text(2, y, anchor="nw", text=linenum)
            i = text_widget.index("%s+1line" % i)

    return redraw


def create_custom_text(root, scrollbar):
    text = Text(root)

    def proxy(*args):
        # Let the actual widget perform the requested action
        cmd = (text._orig,) + args
        result = text.tk.call(cmd)

        # Generate an event if something was added or deleted,
        # or the cursor position changed
        if (
            args[0] in ("insert", "replace", "delete")
            or args[0:3] == ("mark", "set", "insert")
            or args[0:2] == ("xview", "moveto")
            or args[0:2] == ("xview", "scroll")
            or args[0:2] == ("yview", "moveto")
            or args[0:2] == ("yview", "scroll")
        ):
            text.event_generate("<<Change>>", when="tail")

        # Return what the actual widget returned
        return result

    text._orig = text._w + "_orig"
    text.tk.call("rename", text._w, text._orig)
    text.tk.createcommand(text._w, proxy)
    text.configure(yscrollcommand=scrollbar.set)

    return text


def create_example(root):
    vsb = Scrollbar(root, orient="vertical")
    vsb.pack(side="right", fill="y")

    text = create_custom_text(root, vsb)
    text.pack(side="right", fill="both", expand=True)

    linenumbers_canvas = Canvas(root, width=30)
    linenumbers_canvas.pack(side="left", fill="y")

    redraw = create_text_line_numbers(linenumbers_canvas, text)

    text.bind("<<Change>>", lambda event: redraw())
    text.bind("<Configure>", lambda event: redraw())

    text.insert("end", "one\ntwo\nthree\n")
    text.insert("end", "four\n", ("bigfont",))
    text.insert("end", "five\n")

    return linenumbers_canvas


if __name__ == "__main__":
    root = Tk()

    def toggle_linenumbers():
        if linenumbers_button_var.get():
            linenumbers_canvas.pack(side="left", fill="y")
        else:
            linenumbers_canvas.pack_forget()

    linenumbers_button_var = BooleanVar(value=True)
    linenumbers_button = Checkbutton(root, text="Line Numbers", variable=linenumbers_button_var, command=toggle_linenumbers)
    linenumbers_button.pack(side="top", anchor="w")

    linenumbers_canvas = create_example(root)

    root.mainloop()
