""" 
Tkinter adding line number to text widget

Inspired by: https://stackoverflow.com/questions/16369470/tkinter-adding-line-number-to-text-widget

Display line number for the Text widget in an adjacent frame.
Refactored into functions to work with small Notepad app.
""" 


from tkinter import *


def create_text_line_numbers(canvas, text_widget):
    def redraw(*args):
        # Redraw line numbers
        canvas.delete("all")

        i = text_widget.index("@0,0")
        while True:
            dline = text_widget.dlineinfo(i)
            if dline is None:
                break
            y = dline[1]
            linenum = str(i).split(".")[0]
            canvas.create_text(2, y, anchor="nw", text=linenum)
            i = text_widget.index("%s+1line" % i)

    return redraw


def create_custom_text(root, scrollbar):
    text = Text(root)

    def proxy(*args):
        # Let the actual widget perform the requested action
        cmd = (text._orig,) + args
        result = text.tk.call(cmd)

        # Generate an event if something was added or deleted,
        # or the cursor position changed
        if (
            args[0] in ("insert", "replace", "delete")
            or args[0:3] == ("mark", "set", "insert")
            or args[0:2] == ("xview", "moveto")
            or args[0:2] == ("xview", "scroll")
            or args[0:2] == ("yview", "moveto")
            or args[0:2] == ("yview", "scroll")
        ):
            text.event_generate("<<Change>>", when="tail")

        # Return what the actual widget returned
        return result

    text._orig = text._w + "_orig"
    text.tk.call("rename", text._w, text._orig)
    text.tk.createcommand(text._w, proxy)
    text.configure(yscrollcommand=scrollbar.set)

    return text


def toggle_linenumbers():
    if linenumbers_button_var.get():
        linenumbers_canvas.pack(side="left", fill="y")
    else:
        linenumbers_canvas.pack_forget()


#def create_menu(root, linenumbers_canvas):  
def create_menu():  
    menubar = Menu(root)
    root.config(menu=menubar)

    view_menu = Menu(menubar, tearoff=False)
    menubar.add_cascade(label="View", menu=view_menu)
    
    # Toggle line numbering on and off
    global linenumbers_button_var
    linenumbers_button_var = BooleanVar(value=True)  # Line numbering is on by default 
    view_menu.add_checkbutton(label="Line Numbers", variable=linenumbers_button_var, command=toggle_linenumbers)


if __name__ == "__main__":
    root = Tk()
    
    scrollbar = Scrollbar(root, orient="vertical")
    scrollbar.pack(side="right", fill="y")
    
    text_widget = create_custom_text(root, scrollbar)
    text_widget.pack(side="right", fill="both", expand=True)
    
    linenumbers_canvas = Canvas(root, width=30)
    linenumbers_canvas.pack(side="left", fill="y")

    text_widget.bind("<<Change>>", lambda event: attach())
    text_widget.bind("<Configure>", lambda event: attach())
    
    attach = create_text_line_numbers(linenumbers_canvas, text_widget)
    
    create_menu()
    
    root.mainloop()



"""
# The following code prevents the Line Numbering canvas from disappearing 
# as the window resizes.  It needs to be integrated with the code above.

from tkinter import *

def resize_canvas(event): 
    if event.width < 30:
        canvas.itemconfigure(line_numbers, width=30)
    else:
        canvas.itemconfigure(line_numbers, width=event.width)

root = Tk()
root.geometry('400x300')

# create the line number canvas
canvas = Canvas(root, width=30, highlightthickness=0)
canvas.pack(side='left', fill='y')

# add the line numbers to the canvas
line_numbers = canvas.create_text(15, 0, anchor='n', text='1')

# create the text widget
text_widget = Text(root)
text_widget.pack(side='right', fill='both', expand=True)

# set initial canvas width
canvas.itemconfigure(line_numbers, width=30)

# bind the canvas to the text widget
text_widget.bind('<Configure>', resize_canvas)

root.mainloop()
"""
