# -*- coding: utf-8 -*-

"""
After many, many failed attempts to incorporate a Justification button into my
Text Editor program, I restarted from scratch with an attempt to code ONLY the
font toolbar in "Skeleton for Font Styling". After many, many (MANY) more failed 
attempts to incorporate a function that would justify text so that would leave 
both sides of a paragraph flush into my font bar, this is a THIRD project that 
will souly focus on the Justify Text function.

Yes, I am that frustrated.

Once successful, this code will be incorporated into the font toolbar in 
"Skeleton for Font Styling", which will then be incorporated into my basic Text
Editor, and finally, into my Advanced Text Editor.

Bear with me.  I'm still learning.
"""

# Attempting to break on spaces and never in the middle of a word

#   Split the text into words.
#   Fit as many words as possible into each line without exceeding the specified width.
#   Redistribute the remaining spaces evenly across the line.


import tkinter as tk

def get_text_widget_width(text_widget):
    return text_widget.winfo_width()

def justify_text(event):
    new_width = event.width
    text = text_widget.get("1.0", "end-1c")
    justified_text = justify_text_helper(text, new_width)
    text_widget.delete("1.0", "end")
    text_widget.insert("1.0", justified_text)

def justify_text_helper(text, width):
    words = text.split()
    justified_lines = []
    current_line = []
    current_length = 0

    for word in words:
        if current_length + len(current_line) + len(word) <= width:  # Check if word can fit in current line
            current_line.append(word)
            current_length += len(word)
        else:
            justified_lines.append(justify_line(current_line, width))
            current_line = [word]
            current_length = len(word)

    if current_line:  # Add the last line without justification
        justified_lines.append(' '.join(current_line))

    justified_text = '\n'.join(justified_lines)
    return justified_text

def justify_line(words, width):
    if len(words) == 1:
        return words[0]  # Single word, no justification needed

    total_length = sum(len(word) for word in words)
    num_spaces = len(words) - 1
    space_width, extra_spaces = divmod(width - total_length, num_spaces)

    justified_line = ''
    for i, word in enumerate(words):
        if i < num_spaces:
            justified_line += word + ' ' * (space_width + (1 if i < extra_spaces else 0))
        else:
            justified_line += word

    return justified_line

# Example usage:
root = tk.Tk()

text_widget = tk.Text(root)
text_widget.pack(fill="both", expand=True)

text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
text_widget.insert("1.0", text)

root.bind("<Configure>", justify_text)

root.mainloop()

