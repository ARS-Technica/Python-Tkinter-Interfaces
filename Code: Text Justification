# -*- coding: utf-8 -*-

"""
After many, many failed attempts to incorporate a Justification button into my
Text Editor program, I restarted from scratch with an attempt to code ONLY the
font toolbar in "Skeleton for Font Styling". After many, many (MANY) more failed 
attempts to incorporate a function that would justify text so that would leave 
both sides of a paragraph flush into my font bar, this is a THIRD project that 
will souly focus on the Justify Text function.

Yes, I am that frustrated.

Once successful, this code will be incorporated into the font toolbar in 
"Skeleton for Font Styling", which will then be incorporated into my basic Text
Editor, and finally, into my Advanced Text Editor.

Bear with me.  I'm still learning.
"""

# # Works great.  However, when text is pasted in, the window must be resized in order to justify the new text.


import tkinter as tk

def get_text_widget_width(text_widget):
    return text_widget.winfo_width()

def justify_text(event):
    new_width = event.width // 8  # Approximate character width in pixels
    text = text_widget.get("1.0", "end-1c")
    justified_text = justify_text_helper(text, new_width)
    text_widget.delete("1.0", "end")
    text_widget.insert("1.0", justified_text)

def justify_text_helper(text, width):
    words = text.split()
    lines = []
    current_line = []
    current_length = 0

    for word in words:
        if current_length + len(word) + len(current_line) > width:
            lines.append(current_line)
            current_line = [word]
            current_length = len(word)
        else:
            current_line.append(word)
            current_length += len(word)
    
    if current_line:
        lines.append(current_line)
    
    justified_lines = []
    for line in lines[:-1]:  # Justify all but the last line
        line_length = sum(len(word) for word in line) + 1 # +1 Necessary for smooth screen re-sizings
        total_spaces = width - line_length
        gaps = len(line) - 1
        if gaps > 0:
            spaces = total_spaces // gaps
            extra_spaces = total_spaces % gaps
            justified_line = ''
            for i, word in enumerate(line):
                if i < extra_spaces:
                    justified_line += word + ' ' * (spaces + 1)
                elif i < gaps:
                    justified_line += word + ' ' * spaces
                else:
                    justified_line += word
            justified_lines.append(justified_line)
        else:
            justified_lines.append(line[0])

    # Add the last line without justification
    last_line = ' '.join(lines[-1])
    justified_lines.append(last_line)
    
    return '\n'.join(justified_lines)

# Example usage:
root = tk.Tk()

text_widget = tk.Text(root)
text_widget.pack(fill="both", expand=True)

text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
text_widget.insert("1.0", text)

root.bind("<Configure>", justify_text)

root.mainloop()

