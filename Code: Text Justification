# -*- coding: utf-8 -*-

"""
After many, many failed attempts to incorporate a Justification button into my
Text Editor program, I restarted from scratch with an attempt to code ONLY the
font toolbar in "Skeleton for Font Styling". After many, many (MANY) more failed 
attempts to incorporate a function that would justify text so that would leave 
both sides of a paragraph flush into my font bar, this is a THIRD project that 
will souly focus on the Justify Text function.

Yes, I am that frustrated.

Once successful, this code will be incorporated into the font toolbar in 
"Skeleton for Font Styling", which will then be incorporated into my basic Text
Editor, and finally, into my Advanced Text Editor.

Bear with me.  I'm still learning.
"""


"""
I solved the issue of preserving multiple font style tags when changing alignment.
The program works well when I highlight text and press align_center_button, 
align_left_button, align_right_button.  However, when I highlight text and press 
align_justify_button, the program freezes.
"""


# Preserves multiple font style tags, text does not resize with screen
# Freezes


from PIL import Image, ImageTk  # For buttons on Toolbar
import tkinter as tk
from tkinter import font
from tkinter import colorchooser
from tkinter import ttk

# Set default font
global default_font
default_font = "Arial"
global default_size
default_size = 12

current_font_family = default_font
current_font_size = default_size

global current_tags
current_tags = []
global style_counter  # Serialize the Styles of Font to Create Unique Tags
style_counter = 0

# MAIN MENU METHODS

# FORMAT BAR METHODS

# COMBOBOX METHODS

def apply_font_style(event=None, fontColor=None, fontBackground=None):
    global current_font_family
    global current_font_size    
    global style_counter
    global last_selection

    # Check if any text is selected
    if text_widget.tag_ranges("sel"):
        # Get the tags applied to the selected text
        current_tags = text_widget.tag_names("sel.first")

        # Determine font weight, slant, underline, and overstrike
        weight = "bold" if "bold" in current_tags else "normal"
        slant = "italic" if "italic" in current_tags else "roman"
        underline = 1 if "underline" in current_tags else 0
        overstrike = 1 if "overstrike" in current_tags else 0

        # Generate a unique tag for the selected text
        tag_name = "custom_font_{}".format(style_counter)

        # Increment style_counter for next font style
        style_counter += 1        
        
        # Apply font styling to the selected text
        text_widget.tag_add(tag_name, "sel.first", "sel.last")

        # Configure the tag with the desired font and style attributes
        text_widget.tag_configure(tag_name, font=(current_font_family, current_font_size, weight, slant),
                           underline=underline, overstrike=overstrike,
                           foreground=fontColor, background=fontBackground)

    else:
        # Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")


def update_comboboxes(event):
    # Get the index of the clicked position    
    cursor_position = text_widget.index("@{},{}".format(event.x, event.y))

    # Get the tag names associated with the cursor position    
    tags = text_widget.tag_names(cursor_position)
    
    # Check if the font attribute is not empty and contains the font family
    if tags:
        # Iterate through tags to find the font attributes
        for tag in tags:
            if tag.startswith("custom_font_"):
                font_info = text_widget.tag_cget(tag, "font")

                family = font.Font(font=font_info).actual()["family"]
                size = font.Font(font=font_info).actual()["size"]

                font_family_combo.set(family)
                font_size_combo.set(size)

    else:
        # Set the font and size comboboxes to display the default font and size
        font_family_combo.set(default_font)
        font_size_combo.set(default_size)

def update_font(event=None):
    global current_font_family
    global current_font_size
    global style_counter

    selected_font = font.Font(family=font_family_combo.get(), size=int(font_size_combo.get()))
    text_widget.tag_configure("custom_font_{}".format(style_counter), font=selected_font)
    
    # Get the selected font family and size
    current_font_family = font_family_combo.get()
    current_font_size = font_size_combo.get()

    # Apply font styling to the selected text
    apply_font_style()


# BUTTON METHODS
# Bold Text bold_it()
def bold(event=None):        
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set
        if "bold" in current_tags:
            # If characters are bold, unbold the range  
            text_widget.tag_delete("bold", "sel.first", "sel.last")
        else:
            # Bold the whole selection
            text_widget.tag_add("bold", "sel.first", "sel.last")
    
        # Compile stle characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Italics Text italics_it()
def italic(event=None):
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set
        if "italic" in current_tags:
            # If characters are italicized, unitalicize the selected text
            text_widget.tag_add("roman", "sel.first", "sel.last")
            text_widget.tag_delete("italic", "sel.first", "sel.last")
        else:
            # Italicize the whole selection
            text_widget.tag_add("italic", "sel.first", "sel.last")
    
        # Compile stle characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")
        
# Underline Text underline_it():
def underline(event=None):
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set
        if "underline" in current_tags:
            # If characters are underlined, remove underlining from the selected text
            text_widget.tag_delete("underline", "sel.first", "sel.last")
        else:
            # Underline the whole selection
            text_widget.tag_add("underline", "sel.first", "sel.last")

        # Compile stle characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Strike Text strike_it()
def strike(event=None):
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags        									
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set												  
        if "overstrike" in current_tags:
            # If characters are striked, remove striking from the selected text
            text_widget.tag_delete("overstrike", "sel.first", "sel.last")	
        else:
            # Strike the whole selection
            text_widget.tag_add("overstrike", "sel.first", "sel.last")
    
        # Compile stle characteristics under a single tag name
        apply_font_style()    
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Change Font Color from Default
def change_color(event=None):
    # Ask the user to choose a font color
    color = colorchooser.askcolor(initialcolor="#000000", title="Choose Font Color")
    color_name = color[1]
    
    # Don't have to remove tag for fontColor the way I do for tags like bold
    
    # Check if any text is selected
    if text_widget.tag_ranges("sel"):
        # Call apply_font_style with updated fontColor
        apply_font_style(fontColor=color_name)
    else:
        # Alert the user that no text has been selected  
        tk.messagebox.showinfo("alert", "No text has been selected")

# Highlight 
def highlight(event=None):
    # Ask the user to choose a background color    
    color = colorchooser.askcolor(initialcolor="#FFFF00", title="Choose Highlight Color")
    color_rgb = color[1]

    # Don't have to remove tag for fontBackground the way I do for tags like bold

    # Check if any text is selected
    if text_widget.tag_ranges("sel"):
        # Call apply_font_style with updated fontBackground
        apply_font_style(fontBackground=color_rgb)
    else:
        # Alert the user that no text has been selected  
        tk.messagebox.showinfo("alert", "No text has been selected")


# TEXT ALIGNMENT FUNCTIONS

def reapply_font_tags(start, end, font_tags):
    """
    This function reapplies the retrieved font-related tags to the selected text after alignment.
    """
    for tag, indices in font_tags.items():
        for index in indices:
            text_widget.tag_add(tag, index, f"{index} + 1c")

def get_all_font_tags(start, end):
    """
    This function retrieves all font-related tags (custom_font_, bold, italic, underline, overstrike)
    for the selected text range.
    """
    font_tags = {}
    index = start

    while index != end:
        tags = text_widget.tag_names(index)
        for tag in tags:
            if tag.startswith("custom_font_") or tag in ["bold", "italic", "underline", "overstrike"]:
                if tag not in font_tags:
                    font_tags[tag] = []
                font_tags[tag].append(index)

        index = text_widget.index(f"{index} + 1c")

    return font_tags

# Helper function to remove alignment tags
def remove_align_tags(start_index, end_index):
    for tag in ["center", "left", "justified", "right"]:
        text_widget.tag_remove(tag, start_index, end_index)

def unjustify_text(start, end):
    lines = text_widget.get(start, end).split("\n")
    removed_justification_lines = []

    for line in lines:
        # Preserves spaces between words
        removed_justification_line = " ".join(line.split())

        # Add two spaces after the end of a sentence
        removed_justification_line = removed_justification_line.replace(". ", ".  ")
        removed_justification_line = removed_justification_line.replace("? ", "?  ")
        removed_justification_line = removed_justification_line.replace("! ", "!  ")

        removed_justification_lines.append(removed_justification_line)

    # Check if the last line is empty and remove it
    if removed_justification_lines and not removed_justification_lines[-1].strip():
        removed_justification_lines.pop()

    removed_justification_text = "\n".join(removed_justification_lines)
    text_widget.delete(start, end)
    text_widget.insert(start, removed_justification_text)



def align_center(event=None):
    # Check if any text is selected    
    if text_widget.tag_ranges("sel"):
        # Align entire selection
        start_index = text_widget.index("sel.first")
        end_index = text_widget.index("sel.last")
        
        # Get all current font tags to preserve them
        current_font_tags = get_all_font_tags(start_index, end_index)
        
        # Remove existing alignment tags within the range
        remove_align_tags(start_index, end_index)
        unjustify_text(start_index, end_index)

        # Apply new alignment tags        
        text_widget.tag_add("center", start_index, end_index)
        text_widget.tag_configure("center", justify="center")

        # Reapply preserved font tags
        reapply_font_tags(start_index, end_index, current_font_tags)
    else:
        # Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

def align_left(event=None):
    # Check if any text is selected
    if text_widget.tag_ranges("sel"):
        # Align entire selection
        start_index = text_widget.index("sel.first")
        end_index = text_widget.index("sel.last")

        # Get all current font tags to preserve them
        current_font_tags = get_all_font_tags(start_index, end_index)
        
        # Remove existing alignment tags within the range
        remove_align_tags(start_index, end_index)
        unjustify_text(start_index, end_index)
        
        # Apply new alignment tags        
        text_widget.tag_add("left", start_index, end_index)
        text_widget.tag_configure("left", justify="left")
        
        # Reapply preserved font tags
        reapply_font_tags(start_index, end_index, current_font_tags)
    else:
        # Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

def align_right(event=None):
    # Check if any text is selected
    if text_widget.tag_ranges("sel"):
        # Align entire selection
        start_index = text_widget.index("sel.first")
        end_index = text_widget.index("sel.last")
        
        # Get all current font tags to preserve them
        current_font_tags = get_all_font_tags(start_index, end_index)
        
        # Remove existing alignment tags within the range
        remove_align_tags(start_index, end_index)
        unjustify_text(start_index, end_index)

        # Apply new alignment tags        
        text_widget.tag_add("right", start_index, end_index)
        text_widget.tag_configure("right", justify="right")
        
        # Reapply preserved font tags
        reapply_font_tags(start_index, end_index, current_font_tags)
    else:
        # Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")





def align_justify(event=None):
    global justified_ranges
    
    if event is None:  # Called from the button, justify selected text
        selections = text_widget.tag_ranges("sel")
        justified_ranges.extend([(text_widget.index(selections[i]), text_widget.index(selections[i+1])) for i in range(0, len(selections), 2)])
    else:  # Called from the resize event, justify all previously justified text
        for start, end in justified_ranges:
            justify_text_range(start, end)

def justify_text_range(start, end):
    global style_counter

    # Get all current font tags to preserve them
    current_font_tags = get_all_font_tags(start, end)

    # Define the tag for justified text
    justify_tag = "justify_{}".format(style_counter)
    style_counter += 1

    # Get the width of the text widget
    widget_width = text_widget.winfo_width()
    
    # Split the selected text into lines
    lines = text_widget.get(start, end).splitlines()

    justified_lines = []

    # Current font settings
    font_info = text_widget.tag_cget("sel", "font")
    current_font = font.Font(font=font_info) if font_info else font.Font(family=current_font_family, size=current_font_size)
    space_width = current_font.measure(" ")
    new_width = widget_width - space_width

    for line in lines:
        words = line.split()
        if not words:
            justified_lines.append("")
            continue

        current_line = []
        current_length = 0

        for word in words:
            word_width = current_font.measure(word)

            if current_length + word_width + (len(current_line) * space_width) <= new_width:
                current_line.append(word)
                current_length += word_width
            else:
                # Justify the current line
                total_spaces = (new_width - current_length) // space_width
                gaps = len(current_line) - 1
                if gaps > 0:
                    spaces = total_spaces // gaps
                    extra_spaces = total_spaces % gaps
                    justified_line = ''
                    for i, w in enumerate(current_line):
                        justified_line += w
                        if i < gaps:
                            justified_line += ' ' * (spaces + 1 if i < extra_spaces else spaces)
                    justified_lines.append(justified_line)
                else:
                    justified_lines.append(current_line[0])

                current_line = [word]
                current_length = word_width

        justified_lines.append(' '.join(current_line))

    # Reconstruct the justified text
    justified_text = "\n".join(justified_lines)
    
    # Apply the justified text and tags back to the widget
    text_widget.delete(start, end)
    text_widget.insert(start, justified_text)
    text_widget.tag_add(justify_tag, start, f"{start} + {len(justified_text)}c")
    text_widget.tag_configure(justify_tag, justify=tk.LEFT)

    apply_font_style()

    # Reapply preserved font tags to the justified text
    reapply_font_tags(start, end, current_font_tags)




# CREATE THE MAIN WINDOW
root = tk.Tk()
root.title("Font Selector")

# CREATING TEXT AREA - FIRST CREATED A FRAME AND THEN APPLIED TEXT OBJECT TO IT.
# Create a text widget to display font changes
text_frame = tk.Frame(root, borderwidth=1, padx=2, relief="sunken")
text_widget = tk.Text(wrap="word", font=(default_font, default_size), background="#FFFFFF", borderwidth=0, highlightthickness=0, undo=True)
text_widget.focus_set()
text_widget.pack(in_=text_frame, side="left", fill="both", expand=True)  # Make the text widget fill the window

# Text for Debugging
text_widget.insert("end", "She then queried, “Whatever do you suppose made a man like that go into the Church?” Then she added, “You like him, don’t you?” Jane Shelby was quite well aware that her husband practically hero-worshipped the younger Scott. She was quite prepared to look with her dry-humoured understanding on little boys who never grew up but there were unanswered questions about Scott that worried her and she wished that her husband were not quite so enchanted with his virtues.\n\n")
text_widget.insert("end", "Shelby replied, “Yes. He’s quite a boy.”\n\n")
text_widget.insert("end", "Actually, secretly Scott’s choice of profession worried Dick Shelby, too. What made it all the more difficult for Shelby to understand was that Scott had come from a wealthy family. A spectacularly successful boy, what had led him into the ministry? \n\n")
text_widget.insert("end", "Shelby himself was neither religious nor irreligious; he was simply a lifelong social and intellectual conformer. He believed that most men went into the church because they were not fit for anything else. The breed was completely foreign to him but because it was incumbent to his position as a Motors Vice President, he alternated Sundays between the exclusive Bloomfield Hills Country Club and the equally exclusive Grosse Point Episcopal Church.")

# PACK TOOLBAR, FORMATBAR, STATUSBAR AND TEXT FRAME.
formattingbar = tk.Frame(root, padx=2, pady=2)
formattingbar.pack(side="top", fill="x")
text_frame.pack(side="bottom", fill="both", expand=True)
text_widget.focus_set()

# COMBOBOXES
# Get all font families
font_families = list(font.families())

# Create a combo box for font selection
font_family_combo = ttk.Combobox(root, values=font_families)
font_family_combo.pack(in_=formattingbar, side="left", padx=4, pady=4)

if default_font in font_families:  # Check that the default font is installed
    font_family_combo.set(default_font)
else:
    font_family_combo.set(font_families[0])  # Set the first available font as default

# Create a combo box for font size selection
font_size_combo = ttk.Combobox(root, values=list(range(8, 72)))
font_size_combo.pack(in_=formattingbar, side="left", padx=4, pady=4)
font_size_combo.set(default_size)

# FORMATBAR BUTTONS
# bold 
bold_button = tk.Button(name="formatbar_b1", borderwidth=1, command=bold, width=20, height=20, pady=10, padx=10)
photo_bold = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/bold.png")
photo_bold = photo_bold.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS) 
image_bold = ImageTk.PhotoImage(photo_bold)
bold_button.config(image=image_bold)
bold_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# italic		
italic_button = tk.Button(name="formatbar_b2", borderwidth=1, command=italic, width=20, height=20)
photo_italic = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/italic.png")
photo_italic = photo_italic.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_italic = ImageTk.PhotoImage(photo_italic)
italic_button.config(image=image_italic)
italic_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# underline		   
underline_button = tk.Button(name="formatbar_b3", borderwidth=1, command=underline, width=20, height=20)
photo_underline = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/underline.png")
photo_underline = photo_underline.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_underline = ImageTk.PhotoImage(photo_underline)
underline_button.config(image=image_underline)
underline_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# strike		
strike_button = tk.Button(name="formatbar_b4", borderwidth=1, command=strike, width=20, height=20)
photo_strike = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/strike.png")
photo_strike = photo_strike.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_strike = ImageTk.PhotoImage(photo_strike)
strike_button.config(image=image_strike)
strike_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# font_color			
font_color_button = tk.Button(name="formatbar_b5", borderwidth=1, command=change_color, width=20, height=20)
photo_font_color = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/font-color.png")
photo_font_color = photo_font_color.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_font_color = ImageTk.PhotoImage(photo_font_color)
font_color_button.config(image=image_font_color)
font_color_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# highlight
highlight_button = tk.Button(name="formatbar_b6", borderwidth=1, command=highlight, width=20, height=20)
photo_highlight = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/highlight.png")
photo_highlight = photo_highlight.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_highlight = ImageTk.PhotoImage(photo_highlight)
highlight_button.config(image=image_highlight)
highlight_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_center			  
align_center_button = tk.Button(name="formatbar_b7", borderwidth=1, command=align_center, width=20, height=20)
photo_align_center = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-center.png")
photo_align_center = photo_align_center.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_center = ImageTk.PhotoImage(photo_align_center)
align_center_button.config(image=image_align_center)
align_center_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_justify			   
align_justify_button = tk.Button(name="formatbar_b8", borderwidth=1, command=align_justify, width=20, height=20)
photo_align_justify = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-justify.png")
photo_align_justify = photo_align_justify.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_justify = ImageTk.PhotoImage(photo_align_justify)
align_justify_button.config(image=image_align_justify)
align_justify_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_left			
align_left_button = tk.Button(name="formatbar_b9", borderwidth=1, command=align_left, width=20, height=20)
photo_align_left = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-left.png")
photo_align_left = photo_align_left.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_left = ImageTk.PhotoImage(photo_align_left)
align_left_button.config(image=image_align_left)
align_left_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_right			 
align_right_button = tk.Button(name="formatbar_b10", borderwidth=1, command=align_right, width=20, height=20)
photo_align_right = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-right.png")
photo_align_right = photo_align_right.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_right = ImageTk.PhotoImage(photo_align_right)
align_right_button.config(image=image_align_right)
align_right_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# STATUS BAR
status = tk.Label(root, text="", bd=1, relief=tk.SUNKEN, anchor=tk.W)

# BINDINGS
# Bind events to update the font
font_family_combo.bind("<<ComboboxSelected>>", update_font)
font_size_combo.bind("<<ComboboxSelected>>", update_font)

# Bind event to apply font style when text is selected
text_widget.bind("<Button-1>", update_comboboxes)

root.bind("<Configure>", align_justify)

# Mainloop of the Program
root.mainloop()

