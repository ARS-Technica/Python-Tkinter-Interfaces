# -*- coding: utf-8 -*-

"""
After many, many failed attempts to incorporate a Justification button into my
Text Editor program, I restarted from scratch with an attempt to code ONLY the
font toolbar in "Skeleton for Font Styling". After many, many (MANY) more failed 
attempts to incorporate a function that would justify text so that would leave 
both sides of a paragraph flush into my font bar, this is a THIRD project that 
will souly focus on the Justify Text function.

Yes, I am that frustrated.

Once successful, this code will be incorporated into the font toolbar in 
"Skeleton for Font Styling", which will then be incorporated into my basic Text
Editor, and finally, into my Advanced Text Editor.

Bear with me.  I'm still learning.
"""

# Attempting to Stop Mid-Word Line Breaks


import tkinter as tk

def get_text_widget_width(text_widget):
    return text_widget.winfo_width()

def justify_text(event):
    new_width = event.width
    text = text_widget.get("1.0", "end-1c")
    justified_text = justify_text_helper(text, new_width)
    text_widget.delete("1.0", "end")
    text_widget.insert("1.0", justified_text)

def justify_text_helper(text, width):
    words = text.split()
    lines = []
    current_line = ''
    for word in words:
        if len(current_line) + len(word) + 1 <= width:  # Check if the word fits on the current line
            if current_line:
                current_line += ' ' + word
            else:
                current_line = word
        else:
            lines.append(current_line)
            current_line = word if len(word) >= width else ''
    if current_line:
        lines.append(current_line)

    # Hyphenate words that need to be broken across multiple lines
    hyphenated_lines = []
    for line in lines:
        hyphenated_line = ''
        words = line.split()
        for i, word in enumerate(words):
            if len(word) > width:  # If the word is longer than the line width, hyphenate it
                hyphenated_line += '\n' + '-'.join([word[j:j+width] for j in range(0, len(word), width)])
            elif len(hyphenated_line) + len(word) + 1 <= width:  # Check if the word fits on the line
                if hyphenated_line:
                    hyphenated_line += ' ' + word
                else:
                    hyphenated_line = word
            else:
                hyphenated_lines.append(hyphenated_line)
                hyphenated_line = word
        if hyphenated_line:
            hyphenated_lines.append(hyphenated_line)

    # Justify the lines
    justified_text = '\n'.join(justify_line(line, width) for line in hyphenated_lines)
    return justified_text

def justify_line(line, width):
    words = line.split()
    num_spaces_needed = width - sum(len(word) for word in words)
    num_gaps = len(words) - 1
    if num_gaps == 0:
        return line
    else:
        space_per_gap = num_spaces_needed // num_gaps
        extra_spaces = num_spaces_needed % num_gaps
        justified_line = words[0]
        for i in range(1, len(words)):
            if i <= extra_spaces:
                justified_line += ' ' * (space_per_gap + 1) + words[i]
            else:
                justified_line += ' ' * space_per_gap + words[i]
        return justified_line

# Example usage:
root = tk.Tk()

text_widget = tk.Text(root)
text_widget.pack(fill="both", expand=True)

text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
text_widget.insert("1.0", text)

root.bind("<Configure>", justify_text)

root.mainloop()

