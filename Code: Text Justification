# -*- coding: utf-8 -*-

"""
After many, many failed attempts to incorporate a Justification button into my
Text Editor program, I restarted from scratch with an attempt to code ONLY the
font toolbar in "Skeleton for Font Styling". After many, many (MANY) more failed 
attempts to incorporate a function that would justify text so that would leave 
both sides of a paragraph flush into my font bar, this is a THIRD project that 
will souly focus on the Justify Text function.

Yes, I am that frustrated.

Once successful, this code will be incorporated into the font toolbar in 
"Skeleton for Font Styling", which will then be incorporated into my basic Text
Editor, and finally, into my Advanced Text Editor.

Bear with me.  I'm still learning.
"""

# Working, but again, only with Monospaced Fonts


from PIL import Image, ImageTk # For buttons on Toolbar
import tkinter as tk
from tkinter import font
from tkinter import colorchooser
from tkinter import ttk


# Set default font
global default_font
default_font = "Arial"
global default_size
default_size = 12

current_font_family = default_font
current_font_size = default_size

global current_tags
current_tags = []
global style_counter  # Serialize the Styles of Font to Create Unique Tags
style_counter = 0

				
# MAIN MENU METHODS 

# FORMAT BAR METHODS

# COMBOBOX METHODS

def apply_font_style(event=None, fontColor=None, fontBackground=None):
    global current_font_family
    global current_font_size    
    global style_counter
    global last_selection

    # Check if any text is selected
    if text_widget.tag_ranges("sel"):
        # Get the tags applied to the selected text
        current_tags = text_widget.tag_names("sel.first")
       
        # Determine font weight, slant, underline, and overstrike
        weight = "bold" if "bold" in current_tags else "normal"
        slant = "italic" if "italic" in current_tags else "roman"
        underline = 1 if "underline" in current_tags else 0
        overstrike = 1 if "overstrike" in current_tags else 0

        # Generate a unique tag for the selected text
        tag_name = "custom_font_{}".format(style_counter)

        # Increment style_counter for next font style
        style_counter += 1        
        
        # Apply font styling to the selected text
        text_widget.tag_add(tag_name, "sel.first", "sel.last")

        # Configure the tag with the desired font and style attributes
        text_widget.tag_configure(tag_name, font=(current_font_family, current_font_size, weight, slant),
                           underline=underline, overstrike=overstrike,
                           foreground=fontColor, background=fontBackground)

    else:
        # Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")


def update_comboboxes(event):
    # Get the index of the clicked position    
    cursor_position = text_widget.index("@{},{}".format(event.x, event.y))

    # Get the tag names associated with the cursor position    
    tags = text_widget.tag_names(cursor_position)
    
    # Check if the font attribute is not empty and contains the font family
    if tags:
        # Iterate through tags to find the font attributes
        for tag in tags:
            if tag.startswith("custom_font_"):
                font_info = text_widget.tag_cget(tag, "font")

                family = font.Font(font=font_info).actual()["family"]
                size = font.Font(font=font_info).actual()["size"]

                font_family_combo.set(family)
                font_size_combo.set(size)

    else:
        # Set the font and size comboboxes to display the default font and size
        font_family_combo.set(default_font)
        font_size_combo.set(default_size)

def update_font(event=None):
    global current_font_family
    global current_font_size
    global style_counter

    selected_font = font.Font(family=font_family_combo.get(), size=int(font_size_combo.get()))
    text_widget.tag_configure("custom_font_{}".format(style_counter), font=selected_font)
    
    # Get the selected font family and size
    current_font_family = font_family_combo.get()
    current_font_size = font_size_combo.get()

    # Apply font styling to the selected text
    apply_font_style()


# BUTTON METHODS
# Bold Text bold_it()
def bold(event=None):        
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set
        if "bold" in current_tags:
            # If characters are bold, unbold the range  
            text_widget.tag_delete("bold", "sel.first", "sel.last")
        else:
            # Bold the whole selection
            text_widget.tag_add("bold", "sel.first", "sel.last")
    
        # Compile stle characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Italics Text italics_it()
def italic(event=None):
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set
        if "italic" in current_tags:
            # If characters are italicized, unitalicize the selected text
            text_widget.tag_add("roman", "sel.first", "sel.last")
            text_widget.tag_delete("italic", "sel.first", "sel.last")
        else:
            # Italicize the whole selection
            text_widget.tag_add("italic", "sel.first", "sel.last")
    
        # Compile stle characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")
        
# Underline Text underline_it():
def underline(event=None):
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set
        if "underline" in current_tags:
            # If characters are underlined, remove underlining from the selected text
            text_widget.tag_delete("underline", "sel.first", "sel.last")
        else:
            # Underline the whole selection
            text_widget.tag_add("underline", "sel.first", "sel.last")

        # Compile stle characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Strike Text strike_it()
def strike(event=None):
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags        									
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set												  
        if "overstrike" in current_tags:
            # If characters are striked, remove striking from the selected text
            text_widget.tag_delete("overstrike", "sel.first", "sel.last")	
        else:
            # Strike the whole selection
            text_widget.tag_add("overstrike", "sel.first", "sel.last")
    
        # Compile stle characteristics under a single tag name
        apply_font_style()    
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Change Font Color from Default
def change_color(event=None):
    # Ask the user to choose a font color
    color = colorchooser.askcolor(initialcolor="#000000", title="Choose Font Color")
    color_name = color[1]
    
    # Don't have to remove tag for fontColor the way I do for tags like bold
    
    # Check if any text is selected
    if text_widget.tag_ranges("sel"):
        # Call apply_font_style with updated fontColor
        apply_font_style(fontColor=color_name)
    else:
        # Alert the user that no text has been selected  
        tk.messagebox.showinfo("alert", "No text has been selected")

# Highlight 
def highlight(event=None):
    # Ask the user to choose a background color    
    color = colorchooser.askcolor(initialcolor="#FFFF00", title="Choose Highlight Color")
    color_rgb = color[1]

    # Don't have to remove tag for fontBackground the way I do for tags like bold

    # Check if any text is selected
    if text_widget.tag_ranges("sel"):
        # Call apply_font_style with updated fontBackground
        apply_font_style(fontBackground=color_rgb)
    else:
        # Alert the user that no text has been selected  
        tk.messagebox.showinfo("alert", "No text has been selected")





def remove_align_tags(start=None, end=None):
    if start is None or end is None:
        # Get the start and end of the entire text widget
        start = "1.0"
        end = "end"

    all_tags = text_widget.tag_names(start)

    if "center" in all_tags:
        text_widget.tag_remove("center", start, end)
    if "left" in all_tags:
        text_widget.tag_remove("left", start, end)
    if "right" in all_tags:
        text_widget.tag_remove("right", start, end)
    if "justified" in all_tags:
        text_widget.tag_remove("justified", start, end)

def align_center(event=None):
    # Get all ranges of selected text
    selections = text_widget.tag_ranges("sel")
    
    # Iterate over each selected range
    for i in range(0, len(selections), 2):
        start = selections[i]
        end = selections[i + 1]

        # Remove existing alignment tags within the selected range
        remove_align_tags(start, end)
        unjustify_text(start, end)  
        # Apply center alignment to the selected range
        text_widget.tag_configure("center", justify='center')
        text_widget.tag_add("center", start, end)

def align_left(event=None):
    # Get all ranges of selected text
    selections = text_widget.tag_ranges("sel")
    
    # Iterate over each selected range
    for i in range(0, len(selections), 2):
        start = selections[i]
        end = selections[i + 1]

        # Remove existing alignment tags within the selected range
        remove_align_tags(start, end)
        unjustify_text(start, end)  
        # Apply left alignment to the selected range
        text_widget.tag_configure("left", justify='left')
        text_widget.tag_add("left", start, end)

def align_right(event=None):
    # Get all ranges of selected text
    selections = text_widget.tag_ranges("sel")
    
    # Iterate over each selected range
    for i in range(0, len(selections), 2):
        start = selections[i]
        end = selections[i + 1]

        # Remove existing alignment tags within the selected range
        remove_align_tags(start, end)
        unjustify_text(start, end)  
        # Apply right alignment to the selected range
        text_widget.tag_configure("right", justify='right')
        text_widget.tag_add("right", start, end)

 



# justify_text
def align_justify(event=None):
    # Determine if we are justifying selected text or all justified text
    # Necessary to keep Justified text justified during window re-sizings
    if event is None:  # Called from the button, justify selected text
        selections = text_widget.tag_ranges("sel")
    else:  # Called from the resize event, justify all previously justified text
        selections = text_widget.tag_ranges("justified")
    
    if not selections:
        # No text selected or no justified text found
        return
    
    # Iterate over each selected range
    for i in range(0, len(selections), 2):
        start = selections[i]
        end = selections[i + 1]

        # Get the selected text
        text = text_widget.get(start, end)
        new_width = text_widget.winfo_width() // 8  # Approximate character width in pixels
        justified_text = align_justify_helper(text, new_width)  # Justify the selected text

        """
        # Remove existing alignment tags within the selected range
        remove_align_tags(start, end)
        unjustify_text(start, end)  
        """

        # Replace the selected text with the justified text
        text_widget.delete(start, end)
        text_widget.insert(start, justified_text)

        # Apply center alignment to the selected        
        new_end = f"{start} + {len(justified_text)}c" # Calculate the new end position
        text_widget.tag_add("justified", start, new_end) # Tag the newly justified text

def align_justify_helper(text, width):
    # This function justifies the entire text while preserving paragraph breaks
    paragraphs = text.split('\n\n')  # Split text into paragraphs by double newline characters
    justified_paragraphs = []  # List to hold justified paragraphs
    
    for paragraph in paragraphs:
        # For each paragraph, justify its text
        lines = justify_paragraph(paragraph, width)
        justified_paragraphs.append('\n'.join(lines))  # Join the lines back into a single string for the paragraph
    
    justified_text = '\n\n'.join(justified_paragraphs)  # Join all paragraphs with double newline characters
    return justified_text

def justify_paragraph(paragraph, width):
    # This function justifies a single paragraph
    words = paragraph.split()  # Split paragraph into individual words
    lines = []  # List to hold the lines of the paragraph
    current_line = []  # List to hold the words of the current line
    current_length = 0  # Length of the current line
    
    for word in words:
        # Check if adding the word would exceed the width
        if current_length + len(word) + len(current_line) > width:
            lines.append(current_line)  # Add the current line to the list of lines
            current_line = [word]  # Start a new line with the current word
            current_length = len(word)  # Reset the length of the current line
        else:
            # Add the word to the current line
            current_line.append(word)
            current_length += len(word)  # Update the length of the current line
    
    if current_line:
        # Add the last line to the list of lines
        lines.append(current_line)
    
    justified_lines = []  # List to hold the justified lines
    for line in lines[:-1]:  # Justify all lines except the last one
        line_length = sum(len(word) for word in line) + 1  # Calculate the total length of words in the line
        # +1 Necessary for smooth screen re-sizings !!!
        total_spaces = width - line_length  # Calculate the total number of spaces needed to justify the line
        gaps = len(line) - 1  # Number of gaps between words
        if gaps > 0:
            spaces = total_spaces // gaps  # Minimum spaces to add between each word
            extra_spaces = total_spaces % gaps  # Extra spaces to distribute evenly
            justified_line = ''  # String to hold the justified line
            for i, word in enumerate(line):
                # Add the word to the justified line
                justified_line += word
                if i < gaps:
                    # Add spaces after the word if it's not the last word in the line
                    justified_line += ' ' * (spaces + 1 if i < extra_spaces else spaces)
            justified_lines.append(justified_line)  # Add the justified line to the list
        else:
            # If there's only one word in the line, add it as is
            if line:  # Check if line is not empty
                justified_lines.append(line[0])

    # Add the last line without justification
    last_line = ' '.join(lines[-1])
    justified_lines.append(last_line)
    
    return justified_lines






















 
def unjustify_text(start, end):
    lines = text_widget.get(start, end).split("\n")
    removed_justification_lines = []

    for line in lines:
        # Preserve spaces between words
        removed_justification_line = " ".join(line.split())

        # Add two spaces after the end of a sentence
        removed_justification_line = removed_justification_line.replace(". ", ".  ")
        removed_justification_line = removed_justification_line.replace("? ", "?  ")
        removed_justification_line = removed_justification_line.replace("! ", "!  ")

        removed_justification_lines.append(removed_justification_line)

    removed_justification_text = "\n".join(removed_justification_lines)
    text_widget.delete(start, end)
    text_widget.insert(start, removed_justification_text)








# CREATE THE MAIN WINDOW
root = tk.Tk()
root.title("Font Selector")


# CREATING TEXT AREA - FIRST CREATED A FRAME AND THEN APPLIED TEXT OBJECT TO IT.
# Create a text widget to display font changes
text_frame = tk.Frame(root, borderwidth=1, padx=2, relief="sunken")
text_widget = tk.Text(wrap="word", font=(default_font, default_size), background="#FFFFFF", borderwidth=0, highlightthickness=0 , undo= True)
text_widget.focus_set()
text_widget.pack(in_=text_frame, side="left", fill="both", expand=True) # Make the text widget fills the window



# Text for Debugging
text_widget.insert("end", "This first sentence tests the bold formatting feature.\n")
text_widget.insert("end", "\n")
text_widget.insert("end", "This second sentence tests the italics formatting feature.\n")
text_widget.insert("end", "\n")
text_widget.insert("end", "This third sentence demonstrates the ability to underline words.\n")
text_widget.insert("end", "\n")



# PACK TOOLBAR, FORMATBAR, STATUSBAR AND TEXT FRAME.
formattingbar = tk.Frame(root, padx=2, pady=2)
formattingbar.pack(side="top", fill="x")
text_frame.pack(side="bottom", fill="both", expand=True)
text_widget.focus_set()


# COMBOBOXES
# Get all font families
font_families = list(font.families())


# Create a combo box for font selection
font_family_combo = ttk.Combobox(root, values=font_families)
font_family_combo.pack(in_=formattingbar, side="left", padx=4, pady=4)


if default_font in font_families:  # Check that the default font is installed
    font_family_combo.set(default_font)
else:
    font_family_combo.set(font_families[0])  # Set the first available font as default


# Create a combo box for font size selection
font_size_combo = ttk.Combobox(root, values=list(range(8, 72)))
font_size_combo.pack(in_=formattingbar, side="left", padx=4, pady=4)
font_size_combo.set(default_size)



# FORMATBAR BUTTONS
#bold 
bold_button = tk.Button(name="formatbar_b1", borderwidth=1, command=bold, width=20, height=20, pady=10, padx=10)
photo_bold = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/bold.png")
photo_bold = photo_bold.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS) 
image_bold = ImageTk.PhotoImage(photo_bold)
bold_button.config(image=image_bold)
bold_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# italic		
italic_button = tk.Button(name="formatbar_b2", borderwidth=1, command=italic, width=20, height=20)
photo_italic = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/italic.png")
photo_italic = photo_italic.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_italic = ImageTk.PhotoImage(photo_italic)
italic_button.config(image=image_italic)
italic_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# underline		   
underline_button = tk.Button(name="formatbar_b3", borderwidth=1, command=underline, width=20, height=20)
photo_underline = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/underline.png")
photo_underline = photo_underline.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_underline = ImageTk.PhotoImage(photo_underline)
underline_button.config(image=image_underline)
underline_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# strike		
strike_button = tk.Button(name="formatbar_b4", borderwidth=1, command=strike, width=20, height=20)
photo_strike = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/strike.png")
photo_strike = photo_strike.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_strike = ImageTk.PhotoImage(photo_strike)
strike_button.config(image=image_strike)
strike_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# font_color			
font_color_button = tk.Button(name="formatbar_b5", borderwidth=1, command=change_color, width=20, height=20)
photo_font_color = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/font-color.png")
photo_font_color = photo_font_color.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_font_color = ImageTk.PhotoImage(photo_font_color)
font_color_button.config(image=image_font_color)
font_color_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# highlight
highlight_button = tk.Button(name="formatbar_b6", borderwidth=1, command=highlight, width=20, height=20)
photo_highlight = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/highlight.png")
photo_highlight = photo_highlight.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_highlight = ImageTk.PhotoImage(photo_highlight)
highlight_button.config(image=image_highlight)
highlight_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_center			  
align_center_button = tk.Button(name="formatbar_b7", borderwidth=1, command=align_center, width=20, height=20)
photo_align_center = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-center.png")
photo_align_center = photo_align_center.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_center = ImageTk.PhotoImage(photo_align_center)
align_center_button.config(image=image_align_center)
align_center_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_justify			   
align_justify_button = tk.Button(name="formatbar_b8", borderwidth=1, command=align_justify, width=20, height=20)
photo_align_justify = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-justify.png")
photo_align_justify = photo_align_justify.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_justify = ImageTk.PhotoImage(photo_align_justify)
align_justify_button.config(image=image_align_justify)
align_justify_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_left			
align_left_button = tk.Button(name="formatbar_b9", borderwidth=1, command=align_left, width=20, height=20)
photo_align_left = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-left.png")
photo_align_left = photo_align_left.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_left = ImageTk.PhotoImage(photo_align_left)
align_left_button.config(image=image_align_left)
align_left_button.pack(in_=formattingbar, side="left", padx=4, pady=4)

# align_right			 
align_right_button = tk.Button(name="formatbar_b10", borderwidth=1, command=align_right, width=20, height=20)
photo_align_right = Image.open(r"C:\Python\Python38-32\Programs\Tkinter\Text-Editor-master\icons/align-right.png")
photo_align_right = photo_align_right.resize((18, 18), Image.Resampling.LANCZOS) #Image.ANTIALIAS)
image_align_right = ImageTk.PhotoImage(photo_align_right)
align_right_button.config(image=image_align_right)
align_right_button.pack(in_=formattingbar, side="left", padx=4, pady=4)



# STATUS BAR
status = tk.Label(root, text="", bd=1, relief=tk.SUNKEN, anchor=tk.W)


# BINDINGS
# Bind events to update the font
font_family_combo.bind("<<ComboboxSelected>>", update_font)
font_size_combo.bind("<<ComboboxSelected>>", update_font)

# Bind event to apply font style when text is selected
text_widget.bind("<Button-1>", update_comboboxes)


root.bind("<Configure>", align_justify)


# Mainloop of the Program
root.mainloop()

 

