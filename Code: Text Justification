# -*- coding: utf-8 -*-

"""
After many, many failed attempts to incorporate a Justification button into my
Text Editor program, I restarted from scratch with an attempt to code ONLY the
font toolbar in "Skeleton for Font Styling". After many, many (MANY) more failed 
attempts to incorporate a function that would justify text so that would leave 
both sides of a paragraph flush into my font bar, this is a THIRD project that 
will souly focus on the Justify Text function.

Yes, I am that frustrated.

Once successful, this code will be incorporated into the font toolbar in 
"Skeleton for Font Styling", which will then be incorporated into my basic Text
Editor, and finally, into my Advanced Text Editor.

Bear with me.  I'm still learning.
"""

# Works beautifully when text is pasted in.  Fails when window resizes.


import tkinter as tk

def get_text_widget_width(text_widget):
    return text_widget.winfo_width()

def justify_text(event):
    new_width = event.width // 10  # Adjusting for character width in pixels
    text = text_widget.get("1.0", "end-1c")
    justified_text = justify_text_helper(text, new_width)
    text_widget.delete("1.0", "end")
    text_widget.insert("1.0", justified_text)

def justify_text_helper(text, width):
    words = text.split()
    lines = []
    current_line = []

    def add_line():
        if not current_line:
          return
        line = ' '.join(current_line)
        spaces_to_add = width - len(line)
          
        # Handle hyphenation
        if spaces_to_add <= 0: # No space for additional words, check for hyphenation
          for i in range(len(current_line) - 1, 0, -1):  # Check from last word to first
            if len(current_line[i]) > 3 and spaces_to_add + len(current_line[i]) - 2 >= 0:  # Check word length and available space
              hyphenated_word = current_line[i][:-1] + '-' + current_line[i][-1]
              current_line[i] = hyphenated_word
              spaces_to_add += len(current_line[i]) - len(line)
              break  # Hyphenate only one word per line
          
        # Distribute spaces for justification
        num_gaps = len(current_line) - 1  # Number of gaps between words
        
        if num_gaps > 0:  # Don't add extra spaces if only one word
          extra_spaces, remainder = divmod(spaces_to_add, num_gaps)
          spaces_per_gap = extra_spaces + 1
          line = (' ' * spaces_per_gap).join(current_line)
          # Distribute remaining spaces (if any)
          for i in range(remainder):
            line = line[:i * spaces_per_gap + i] + ' ' + line[i * spaces_per_gap + i:]
          
        lines.append(line)
        current_line.clear()

    for word in words:
        if len(' '.join(current_line + [word])) > width:
            add_line()
        current_line.append(word)
    
    add_line()  # Add the last line

    return '\n'.join(lines)

# Example usage:
root = tk.Tk()

text_widget = tk.Text(root)
text_widget.pack(fill="both", expand=True)

text = "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat."
text_widget.insert("1.0", text)

root.bind("<Configure>", justify_text)

root.mainloop()

