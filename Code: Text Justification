# -*- coding: utf-8 -*-

"""
After many, many failed attempts to incorporate a Justification button into my
Text Editor program, I restarted from scratch with an attempt to code ONLY the
font toolbar in "Skeleton for Font Styling". After many, many (MANY) more failed 
attempts to incorporate a function that would justify text so that would leave 
both sides of a paragraph flush into my font bar, this is a THIRD project that 
will souly focus on the Justify Text function.

Yes, I am that frustrated.

Once successful, this code will be incorporated into the font toolbar in 
"Skeleton for Font Styling", which will then be incorporated into my basic Text
Editor, and finally, into my Advanced Text Editor.

Bear with me.  I'm still learning.
"""


"""
I solved the issue of preserving multiple font style tags when changing alignment.
The program works well when I highlight text and press align_center_button, 
align_left_button, align_right_button.  However, when I highlight text and press 
align_justify_button, the program freezes.
"""


# Attempting to improve efficiency of Justification to avoid program freezing
# Re-wrote align_justify function to incorporate all its helper functions
# Justification no long fits text to text_widget width


from PIL import Image, ImageTk  # For buttons on Toolbar
import tkinter as tk
from tkinter import font
from tkinter import colorchooser
from tkinter import ttk

# Set default font
global default_font
default_font = "Arial"
global default_size
default_size = 12

current_font_family = default_font
current_font_size = default_size

global current_tags
current_tags = []
global style_counter  # Serialize the Styles of Font to Create Unique Tags
style_counter = 0

# MAIN MENU METHODS

# FORMAT BAR METHODS

# COMBOBOX METHODS

def apply_font_style(event=None, fontColor=None, fontBackground=None):
    global current_font_family
    global current_font_size    
    global style_counter
    global last_selection

    # Check if any text is selected
    if text_widget.tag_ranges("sel"):
        # Get the tags applied to the selected text
        current_tags = text_widget.tag_names("sel.first")

        # Determine font weight, slant, underline, and overstrike
        weight = "bold" if "bold" in current_tags else "normal"
        slant = "italic" if "italic" in current_tags else "roman"
        underline = 1 if "underline" in current_tags else 0
        overstrike = 1 if "overstrike" in current_tags else 0

        # Generate a unique tag for the selected text
        tag_name = "custom_font_{}".format(style_counter)

        # Increment style_counter for next font style
        style_counter += 1        
        
        # Apply font styling to the selected text
        text_widget.tag_add(tag_name, "sel.first", "sel.last")

        # Configure the tag with the desired font and style attributes
        text_widget.tag_configure(tag_name, font=(current_font_family, current_font_size, weight, slant),
                           underline=underline, overstrike=overstrike,
                           foreground=fontColor, background=fontBackground)
        
    else:
        # Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")


def update_comboboxes(event):
    # Get the index of the clicked position    
    cursor_position = text_widget.index("@{},{}".format(event.x, event.y))

    # Get the tag names associated with the cursor position    
    tags = text_widget.tag_names(cursor_position)
    
    # Check if the font attribute is not empty and contains the font family
    if tags:
        # Iterate through tags to find the font attributes
        for tag in tags:
            if tag.startswith("custom_font_"):
                font_info = text_widget.tag_cget(tag, "font")

                family = font.Font(font=font_info).actual()["family"]
                size = font.Font(font=font_info).actual()["size"]

                font_family_combo.set(family)
                font_size_combo.set(size)

    else:
        # Set the font and size comboboxes to display the default font and size
        font_family_combo.set(default_font)
        font_size_combo.set(default_size)


def update_font(event=None):
    global current_font_family
    global current_font_size
    global style_counter

    selected_font_family = font_family_combo.get()
    selected_font_size = int(font_size_combo.get())

    # Check if the font size has changed
    size_changed = selected_font_size != current_font_size

    # Get the selected font family and size
    current_font_family = selected_font_family
    current_font_size = selected_font_size

    selected_font = font.Font(family=current_font_family, size=current_font_size)
    text_widget.tag_configure("custom_font_{}".format(style_counter), font=selected_font)

    # Apply font styling to the selected text
    apply_font_style()

    # Re-justify text if it has the justified tag
    # Prevents mid-line breaks after changing font size of justified text
    # Call align_justify only if the font size has changed
    if size_changed:
        align_justify()


# BUTTON METHODS
# Bold Text bold_it()
def bold(event=None):        
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set
        if "bold" in current_tags:
            # If characters are bold, unbold the range  
            text_widget.tag_delete("bold", "sel.first", "sel.last")
        else:
            # Bold the whole selection
            text_widget.tag_add("bold", "sel.first", "sel.last")
    
        # Compile style characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Italics Text italics_it()
def italic(event=None):
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set
        if "italic" in current_tags:
            # If characters are italicized, unitalicize the selected text
            text_widget.tag_add("roman", "sel.first", "sel.last")
            text_widget.tag_delete("italic", "sel.first", "sel.last")
        else:
            # Italicize the whole selection
            text_widget.tag_add("italic", "sel.first", "sel.last")
    
        # Compile style characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")
        
# Underline Text underline_it():
def underline(event=None):
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set
        if "underline" in current_tags:
            # If characters are underlined, remove underlining from the selected text
            text_widget.tag_delete("underline", "sel.first", "sel.last")
        else:
            # Underline the whole selection
            text_widget.tag_add("underline", "sel.first", "sel.last")

        # Compile style characteristics under a single tag name
        apply_font_style()
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Strike Text strike_it()
def strike(event=None):
    # Check if any text is selected, otherwise app throws an error
    if text_widget.tag_ranges("sel"):
        # Define Current tags        									
        current_tags = list(text_widget.tag_names())

        # Check to see if tag has already been set												  
        if "overstrike" in current_tags:
            # If characters are striked, remove striking from the selected text
            text_widget.tag_delete("overstrike", "sel.first", "sel.last")	
        else:
            # Strike the whole selection
            text_widget.tag_add("overstrike", "sel.first", "sel.last")
    
        # Compile style characteristics under a single tag name
        apply_font_style()    
    else:
        # Alert user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")

# Change Font Color from Default
def change_color(event=None):
    # Ask the user to choose a font color
    color = colorchooser.askcolor(initialcolor="#000000", title="Choose Font Color")
    color_name = color[1]
    
    # Don't have to remove tag for fontColor the way I do for tags like bold
    
    # Check if any text is selected
    if text_widget.tag_ranges("sel"):
        # Call apply_font_style with updated fontColor
        apply_font_style(fontColor=color_name)
    else:
        # Alert the user that no text has been selected  
        tk.messagebox.showinfo("alert", "No text has been selected")

# Highlight 
def highlight(event=None):
    # Ask the user to choose a background color    
    color = colorchooser.askcolor(initialcolor="#FFFF00", title="Choose Highlight Color")
    color_rgb = color[1]

    # Don't have to remove tag for fontBackground the way I do for tags like bold

    # Check if any text is selected
    if text_widget.tag_ranges("sel"):
        # Call apply_font_style with updated fontBackground
        apply_font_style(fontBackground=color_rgb)
    else:
        # Alert the user that no text has been selected  
        tk.messagebox.showinfo("alert", "No text has been selected")


# TEXT ALIGNMENT FUNCTIONS
def apply_font_tags(start, end, font_tags):
    """
    This function reapplies the retrieved font-related tags to the selected text after alignment.
    """
    for tag in font_tags:
        text_widget.tag_add(tag, start, end)

# Helper function to preserve text attributes when justifying text
def get_current_font_tags(start):
    """
    This function retrieves all font-related tags (custom_font_, bold, italic, 
    underline, overstrike) for the selected text.
    """
    tags = text_widget.tag_names(start)
    font_tags = []

    for tag in tags:
        if tag.startswith("custom_font_") or tag in ("bold", "italic", "underline", "overstrike"):
            font_tags.append(tag)

    return font_tags

def align_left():
    text_widget.tag_configure("left", justify=tk.LEFT)
    current_tags = list(text_widget.tag_names("sel.first"))
    start = "sel.first"
    end = "sel.last"
    text_widget.tag_add("left", start, end)
    for tag in current_tags:
        text_widget.tag_remove(tag, start, end)
    apply_font_style()

def align_center():
    text_widget.tag_configure("center", justify=tk.CENTER)
    current_tags = list(text_widget.tag_names("sel.first"))
    start = "sel.first"
    end = "sel.last"
    text_widget.tag_add("center", start, end)
    for tag in current_tags:
        text_widget.tag_remove(tag, start, end)
    apply_font_style()

def align_right():
    text_widget.tag_configure("right", justify=tk.RIGHT)
    current_tags = list(text_widget.tag_names("sel.first"))
    start = "sel.first"
    end = "sel.last"
    text_widget.tag_add("right", start, end)
    for tag in current_tags:
        text_widget.tag_remove(tag, start, end)
    apply_font_style()



def align_justify():
    global style_counter

    if text_widget.tag_ranges("sel"):
        start = text_widget.index("sel.first")
        end = text_widget.index("sel.last")

        # Define the tag for justified text
        justify_tag = "justify_{}".format(style_counter)
        style_counter += 1

        # Get the width of the text widget
        widget_width = text_widget.winfo_width()

        # Split the selected text into lines
        lines = text_widget.get(start, end).splitlines()

        justified_lines = []

        # Iterate through the lines
        for line in lines:
            words = line.split()
            if not words:
                justified_lines.append("")
                continue

            current_line = words[0]
            current_width = font.Font(family=current_font_family, size=current_font_size).measure(current_line)

            for word in words[1:]:
                word_width = font.Font(family=current_font_family, size=current_font_size).measure(word)
                if current_width + word_width + font.Font(family=current_font_family, size=current_font_size).measure(" ") <= widget_width:
                    current_line += " " + word
                    current_width += word_width + font.Font(family=current_font_family, size=current_font_size).measure(" ")
                else:
                    spaces_needed = widget_width - current_width
                    spaces_count = current_line.count(" ")
                    if spaces_count > 0:
                        extra_space = spaces_needed // spaces_count
                        remainder_space = spaces_needed % spaces_count
                        parts = current_line.split(" ")
                        current_line = ""
                        for i, part in enumerate(parts[:-1]):
                            current_line += part + " " * (extra_space + 1 + (1 if i < remainder_space else 0))
                        current_line += parts[-1]
                    justified_lines.append(current_line)
                    current_line = word
                    current_width = word_width

            justified_lines.append(current_line)

        # Reconstruct the justified text
        justified_text = "\n".join(justified_lines)

        # Apply the justified text and tags back to the widget
        text_widget.delete(start, end)
        text_widget.insert(start, justified_text)
        text_widget.tag_add(justify_tag, start, f"{start} + {len(justified_text)}c")
        text_widget.tag_configure(justify_tag, justify=tk.LEFT)

        apply_font_style()

        # Reapply font tags to the justified text
        apply_font_tags(start, end, get_current_font_tags(start))



# MAIN APP
root = tk.Tk()
root.title("Text Editor")
root.geometry("800x600")

# Create a Text Widget
text_widget = tk.Text(root, wrap="word", undo=True, font=(default_font, default_size))
text_widget.pack(expand=True, fill="both")

# Create a Format Toolbar
toolbar = tk.Frame(root)
toolbar.pack(fill="x")

# Font Family Combobox
font_family_combo = ttk.Combobox(toolbar, values=font.families(), state="readonly")
font_family_combo.set(default_font)
font_family_combo.pack(side="left", padx=(5, 0))

# Font Size Combobox
font_size_combo = ttk.Combobox(toolbar, values=[str(size) for size in range(8, 100)], state="readonly")
font_size_combo.set(default_size)
font_size_combo.pack(side="left", padx=(5, 0))

# Bind Font and Size Comboboxes to update_font function
font_family_combo.bind("<<ComboboxSelected>>", update_font)
font_size_combo.bind("<<ComboboxSelected>>", update_font)

# Add Buttons to the Toolbar
left_align_button = ttk.Button(toolbar, text="Left", command=align_left)
left_align_button.pack(side="left", padx=5)

center_align_button = ttk.Button(toolbar, text="Center", command=align_center)
center_align_button.pack(side="left", padx=5)

right_align_button = ttk.Button(toolbar, text="Right", command=align_right)
right_align_button.pack(side="left", padx=5)

justify_align_button = ttk.Button(toolbar, text="Justify", command=align_justify)
justify_align_button.pack(side="left", padx=5)

bold_button = ttk.Button(toolbar, text="Bold", command=bold)
bold_button.pack(side="left", padx=5)

italic_button = ttk.Button(toolbar, text="Italic", command=italic)
italic_button.pack(side="left", padx=5)

underline_button = ttk.Button(toolbar, text="Underline", command=underline)
underline_button.pack(side="left", padx=5)

strike_button = ttk.Button(toolbar, text="Strike", command=strike)
strike_button.pack(side="left", padx=5)

color_button = ttk.Button(toolbar, text="Color", command=change_color)
color_button.pack(side="left", padx=5)

highlight_button = ttk.Button(toolbar, text="Highlight", command=highlight)
highlight_button.pack(side="left", padx=5)


# Bind the text widget to update_comboboxes function when clicking within the text
text_widget.bind("<Button-1>", update_comboboxes)

root.mainloop()

