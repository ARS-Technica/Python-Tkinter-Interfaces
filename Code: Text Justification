# -*- coding: utf-8 -*-

"""
After many, many failed attempts to incorporate a Justification button into my
Text Editor program, I restarted from scratch with an attempt to code ONLY the
font toolbar in "Skeleton for Font Styling". After many, many (MANY) more failed 
attempts to incorporate a function that would justify text so that would leave 
both sides of a paragraph flush into my font bar, this is a THIRD project that 
will souly focus on the Justify Text function.

Yes, I am that frustrated.

Once successful, this code will be incorporated into the font toolbar in 
"Skeleton for Font Styling", which will then be incorporated into my basic Text
Editor, and finally, into my Advanced Text Editor.

Bear with me.  I'm still learning.
"""


# Can't see if justification is working because of scrollbar


from PIL import Image, ImageTk  # For buttons on Toolbar
import tkinter as tk
from tkinter import font
from tkinter import colorchooser
from tkinter import ttk

# Set default font
global default_font
default_font = "Arial"
global default_size
default_size = 12

current_font_family = default_font
current_font_size = default_size

global current_tags
current_tags = []
global style_counter  # Serialize the Styles of Font to Create Unique Tags
style_counter = 0

def apply_font_style(event=None, fontColor=None, fontBackground=None):
    global current_font_family
    global current_font_size    
    global style_counter
    global last_selection

    if text_widget.tag_ranges("sel"):
        current_tags = text_widget.tag_names("sel.first")

        weight = "bold" if "bold" in current_tags else "normal"
        slant = "italic" if "italic" in current_tags else "roman"
        underline = 1 if "underline" in current_tags else 0
        overstrike = 1 if "overstrike" in current_tags else 0

        tag_name = "custom_font_{}".format(style_counter)

        style_counter += 1        
        
        text_widget.tag_add(tag_name, "sel.first", "sel.last")

        text_widget.tag_configure(tag_name, font=(current_font_family, current_font_size, weight, slant),
                                  underline=underline, overstrike=overstrike,
                                  foreground=fontColor, background=fontBackground)

    else:
        tk.messagebox.showinfo("alert", "No text has been selected")

def update_comboboxes(event):
    cursor_position = text_widget.index("@{},{}".format(event.x, event.y))
    tags = text_widget.tag_names(cursor_position)
    
    if tags:
        for tag in tags:
            if tag.startswith("custom_font_"):
                font_info = text_widget.tag_cget(tag, "font")
                family = font.Font(font=font_info).actual()["family"]
                size = font.Font(font=font_info).actual()["size"]
                font_family_combo.set(family)
                font_size_combo.set(size)
    else:
        font_family_combo.set(default_font)
        font_size_combo.set(default_size)

def update_font(event=None):
    global current_font_family
    global current_font_size
    global style_counter

    selected_font = font.Font(family=font_family_combo.get(), size=int(font_size_combo.get()))
    text_widget.tag_configure("custom_font_{}".format(style_counter), font=selected_font)
    
    current_font_family = font_family_combo.get()
    current_font_size = font_size_combo.get()

    apply_font_style()

def bold(event=None):        
    if text_widget.tag_ranges("sel"):
        current_tags = list(text_widget.tag_names())
        if "bold" in current_tags:
            text_widget.tag_delete("bold", "sel.first", "sel.last")
        else:
            text_widget.tag_add("bold", "sel.first", "sel.last")
        apply_font_style()
    else:
        tk.messagebox.showinfo("alert", "No text has been selected")

def italic(event=None):
    if text_widget.tag_ranges("sel"):
        current_tags = list(text_widget.tag_names())
        if "italic" in current_tags:
            text_widget.tag_add("roman", "sel.first", "sel.last")
            text_widget.tag_delete("italic", "sel.first", "sel.last")
        else:
            text_widget.tag_add("italic", "sel.first", "sel.last")
        apply_font_style()
    else:
        tk.messagebox.showinfo("alert", "No text has been selected")

def underline(event=None):
    if text_widget.tag_ranges("sel"):
        current_tags = list(text_widget.tag_names())
        if "underline" in current_tags:
            text_widget.tag_delete("underline", "sel.first", "sel.last")
        else:
            text_widget.tag_add("underline", "sel.first", "sel.last")
        apply_font_style()
    else:
        tk.messagebox.showinfo("alert", "No text has been selected")

def strike(event=None):
    if text_widget.tag_ranges("sel"):
        current_tags = list(text_widget.tag_names())
        if "overstrike" in current_tags:
            text_widget.tag_delete("overstrike", "sel.first", "sel.last")	
        else:
            text_widget.tag_add("overstrike", "sel.first", "sel.last")
        apply_font_style()    
    else:
        tk.messagebox.showinfo("alert", "No text has been selected")

def change_color(event=None):
    color = colorchooser.askcolor(initialcolor="#000000", title="Choose Font Color")
    color_name = color[1]
    if text_widget.tag_ranges("sel"):
        apply_font_style(fontColor=color_name)
    else:
        tk.messagebox.showinfo("alert", "No text has been selected")

def highlight(event=None):
    color = colorchooser.askcolor(initialcolor="#FFFF00", title="Choose Highlight Color")
    color_rgb = color[1]
    if text_widget.tag_ranges("sel"):
        apply_font_style(fontBackground=color_rgb)
    else:
        tk.messagebox.showinfo("alert", "No text has been selected")

def remove_align_tags(start=None, end=None):
    if start is None or end is None:
        start = "1.0"
        end = "end"

    all_tags = text_widget.tag_names(start)

    if "center" in all_tags:
        text_widget.tag_remove("center", start, end)
    if "left" in all_tags:
        text_widget.tag_remove("left", start, end)
    if "right" in all_tags:
        text_widget.tag_remove("right", start, end)
    if "justified" in all_tags:
        text_widget.tag_remove("justified", start, end)

def get_current_font_tags(start):
    tags = text_widget.tag_names(start)
    font_tags = {}

    for tag in tags:
        if tag.startswith("custom_font_"):
            font_tags["font"] = text_widget.tag_cget(tag, "font")
        if text_widget.tag_cget(tag, "foreground"):
            font_tags["foreground"] = text_widget.tag_cget(tag, "foreground")
        if text_widget.tag_cget(tag, "background"):
            font_tags["background"] = text_widget.tag_cget(tag, "background")
        if text_widget.tag_cget(tag, "underline"):
            font_tags["underline"] = text_widget.tag_cget(tag, "underline")
        if text_widget.tag_cget(tag, "overstrike"):
            font_tags["overstrike"] = text_widget.tag_cget(tag, "overstrike")

    return font_tags

def apply_font_tags(font_tags, tag_name):
    if "font" in font_tags:
        text_widget.tag_configure(tag_name, font=font_tags["font"])
    if "foreground" in font_tags:
        text_widget.tag_configure(tag_name, foreground=font_tags["foreground"])
    if "background" in font_tags:
        text_widget.tag_configure(tag_name, background=font_tags["background"])
    if "underline" in font_tags:
        text_widget.tag_configure(tag_name, underline=font_tags["underline"])
    if "overstrike" in font_tags:
        text_widget.tag_configure(tag_name, overstrike=font_tags["overstrike"])

def align_center(event=None):
    if text_widget.tag_ranges("sel"):
        start_index = text_widget.index("sel.first")
        end_index = text_widget.index("sel.last")
        current_font_tags = get_current_font_tags(start_index)
        remove_align_tags(start_index, end_index)
        text_widget.tag_add("center", start_index, end_index)
        text_widget.tag_configure("center", justify="center")
        apply_font_tags(current_font_tags, "center")
    else:
        tk.messagebox.showinfo("alert", "No text has been selected")

def align_left(event=None):
    if text_widget.tag_ranges("sel"):
        start_index = text_widget.index("sel.first")
        end_index = text_widget.index("sel.last")
        current_font_tags = get_current_font_tags(start_index)
        remove_align_tags(start_index, end_index)
        text_widget.tag_add("left", start_index, end_index)
        text_widget.tag_configure("left", justify="left")
        apply_font_tags(current_font_tags, "left")
    else:
        tk.messagebox.showinfo("alert", "No text has been selected")

def align_right(event=None):
    if text_widget.tag_ranges("sel"):
        start_index = text_widget.index("sel.first")
        end_index = text_widget.index("sel.last")
        current_font_tags = get_current_font_tags(start_index)
        remove_align_tags(start_index, end_index)
        text_widget.tag_add("right", start_index, end_index)
        text_widget.tag_configure("right", justify="right")
        apply_font_tags(current_font_tags, "right")
    else:
        tk.messagebox.showinfo("alert", "No text has been selected")

def align_justify(event=None):
    global current_font_family
    global current_font_size

    if event is None:
        selections = text_widget.tag_ranges("sel")
    else:
        selections = text_widget.tag_ranges("justified")
    
    if not selections:
        return
    
    for i in range(0, len(selections), 2):
        start = selections[i]
        end = selections[i + 1]

        end_char = text_widget.get(f"{end} - 1c", end)
        if end_char == '\n':
            end = f"{end} - 1c"

        text = text_widget.get(start, end)
        
        font_info = text_widget.tag_cget("sel", "font")
        current_font = font.Font(font=font_info) if font_info else font.Font(family=current_font_family, size=current_font_size)
        space_width = current_font.measure(" ")
        new_width = text_widget.winfo_width() - space_width

        justified_text = align_justify_helper(text, new_width, current_font)

        text_widget.delete(start, end)
        text_widget.insert(start, justified_text)

        new_end = f"{start} + {len(justified_text)}c"
        text_widget.tag_add("justified", start, new_end)
        
        current_tags = get_current_font_tags(start)
        apply_font_tags(current_tags, "justified")
        text_widget.tag_add("justified", start, new_end)

def align_justify_helper(text, widget_width, current_font):
    paragraphs = text.split('\n\n')
    justified_paragraphs = []
    
    for paragraph in paragraphs:
        lines = justify_paragraph(paragraph, widget_width, current_font)
        justified_paragraphs.append('\n'.join(lines))
    
    justified_text = '\n\n'.join(justified_paragraphs)
    return justified_text

def justify_paragraph(paragraph, widget_width, current_font):
    words = paragraph.split()
    
    space_width = current_font.measure(" ")
    lines = []
    current_line = []
    current_length = 0
    
    for word in words:
        word_width = current_font.measure(word)
        
        if current_length + word_width + (len(current_line) * space_width) <= widget_width:
            current_line.append(word)
            current_length += word_width
        else:
            lines.append(current_line)
            current_line = [word]
            current_length = word_width
    
    if current_line:
        lines.append(current_line)
        
    justified_lines = []
    for line in lines[:-1]:
        line_length = sum(current_font.measure(word) for word in line)
        total_spaces = (widget_width - line_length) // space_width
        gaps = len(line) - 1
        if gaps > 0:
            spaces = total_spaces // gaps
            extra_spaces = total_spaces % gaps
            justified_line = ''
            for i, word in enumerate(line):
                justified_line += word
                if i < gaps:
                    justified_line += ' ' * (spaces + 1 if i < extra_spaces else spaces)
            justified_lines.append(justified_line)
        else:
            if line:
                justified_lines.append(line[0])

    last_line = ' '.join(lines[-1])
    justified_lines.append(last_line)
    
    return justified_lines

def change_font(event):
    selected_font_family = font_family_combo.get()
    selected_font_size = int(font_size_combo.get())
    text_widget.tag_configure("custom_font", font=(selected_font_family, selected_font_size))
    start_index = text_widget.index("sel.first")
    end_index = text_widget.index("sel.last")
    text_widget.tag_add("custom_font", start_index, end_index)
    text_widget.tag_configure("custom_font", font=(selected_font_family, selected_font_size))
    global current_font_family
    global current_font_size
    current_font_family = selected_font_family
    current_font_size = selected_font_size

def select_all(event):
    text_widget.tag_add("sel", "1.0", "end")

def deselect_all(event):
    text_widget.tag_remove("sel", "1.0", "end")

root = tk.Tk()
root.title("Word Processor Clone")
root.geometry("1200x800")

main_frame = tk.Frame(root)
main_frame.pack(fill=tk.BOTH, expand=1)

text_widget = tk.Text(main_frame, wrap=tk.WORD, font=(default_font, default_size), undo=True)
text_widget.pack(fill=tk.BOTH, expand=1)

scrollbar = tk.Scrollbar(text_widget)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
text_widget.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=text_widget.yview)

default_font = font.Font(family="Arial", size=12)
text_widget.configure(font=default_font)

font_families = list(font.families())
font_family_combo = ttk.Combobox(main_frame, values=font_families, state="readonly")
font_family_combo.set(default_font.actual()["family"])
font_family_combo.pack(side=tk.LEFT, padx=10)
font_family_combo.bind("<<ComboboxSelected>>", update_font)

font_sizes = list(range(8, 73, 2))
font_size_combo = ttk.Combobox(main_frame, values=font_sizes, state="readonly")
font_size_combo.set(default_font.actual()["size"])
font_size_combo.pack(side=tk.LEFT)
font_size_combo.bind("<<ComboboxSelected>>", update_font)

toolbar_frame = tk.Frame(main_frame)
toolbar_frame.pack(fill=tk.X)

align_left_button = tk.Button(toolbar_frame, text="Align Left", command=align_left)
align_left_button.pack(side=tk.LEFT, padx=2)
align_center_button = tk.Button(toolbar_frame, text="Align Center", command=align_center)
align_center_button.pack(side=tk.LEFT, padx=2)
align_right_button = tk.Button(toolbar_frame, text="Align Right", command=align_right)
align_right_button.pack(side=tk.LEFT, padx=2)
align_justify_button = tk.Button(toolbar_frame, text="Justify", command=align_justify)
align_justify_button.pack(side=tk.LEFT, padx=2)

root.bind_all("<Control-a>", select_all)
root.bind_all("<Control-Shift-a>", deselect_all)
text_widget.bind("<Button-1>", update_comboboxes)

root.mainloop()

