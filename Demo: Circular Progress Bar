"""
Circular Progress Bar

The challenge is to create a circular progress gauge that counts up from 0 to 
100 in Python using the Tkinter library.  Every example of Circular Progress 
Bars I could find on Youtube made use of Pyside or PyQT.  I'm currently teaching
myself Tkinter, and I'm interested in seeing if the same effect can be 
established with plain vanilla Tkinter and some math.
"""

from tkinter import Button, Canvas, Frame, Tk, LEFT, RIGHT
from math import cos, radians, sin
import winsound

degrees = 0
pause = False

def create_interface():
    global canvas, degrees, window, pause_button, reset_button, start_button

    degrees = 0  # Will be divided into percentage in update_progress_gauge
    pause = True

    window = create_window()
    canvas = create_progress_gauge(window)
    create_buttons(window)
    window.mainloop()

def create_progress_gauge(window):
    frame = Frame(window, height=600, width=600, bg="black", relief="sunken")
    frame.pack(fill="both", expand=True)

    canvas = Canvas(frame, bg="black", width=585, height=585, relief="raised", bd=1)
    canvas.pack(padx=5, pady=5, fill="both", expand=True)

    # Draw the circular outlines of the gauge
    canvas.create_oval(100, 100, 500, 500, fill="", outline="", width=5, tag="outline")
    canvas.create_oval(150, 150, 450, 450, fill="", outline="dark violet", width=6, tag="outline")
    canvas.create_oval(180, 180, 420, 420, fill="black", outline="dark violet", width=6, tag="outline")
    canvas.tag_raise('outline')
    
    progress_text = "0%"
    canvas.create_text(300, 275, text=progress_text, font=("Arial", 42, "bold"), fill="deep sky blue", tags="percentage_counter")
    canvas.create_text(300, 325, text="READY!", font=("Arial", 22, "bold"), fill="white", tags="ready_label")

    return canvas

def create_window():
    window = Tk()
    window.title("Demo: Circular Progress Gauge")
    window.geometry("600x650+100+100")
    window.configure(bg="#000000")

    return window

def create_buttons(window):
    global pause_button, reset_button, start_button

    button_width = 20

    start_button = Button(window, text="Start", font=("Arial", 12), bg="green2", command=start_progress, width=button_width)
    start_button.pack(side=LEFT, padx=3, pady=5)

    pause_button = Button(window, text="Pause", font=("Arial", 12), bg="yellow", command=pause_progress, width=button_width)
    pause_button.pack(side=RIGHT, padx=3, pady=5)

    reset_button = Button(window, text="Reset", font=("Arial", 12), bg="red", command=reset_progress, width=button_width)
    #reset_button.pack(side=RIGHT, padx=3, pady=5)

def start_progress():
    global pause, degrees

    pause = False
    canvas.delete("ready_label")
    update_progress_gauge()

    if degrees == 360:
        pause_button.pack_forget()
        reset_button.pack(side=RIGHT, padx=3, pady=5)
        reset_button.config(command=restart_progress)
    else:
        reset_button.pack_forget()
        pause_button.pack(side=RIGHT, padx=3, pady=5)
        pause_button.config(command=pause_progress)

def pause_progress():
    global pause

    pause = True

    pause_button.pack_forget()
    reset_button.pack(side=RIGHT, padx=3, pady=5)

def reset_progress():
    global degrees, pause

    degrees = 0
    pause = True

    canvas.delete("progress_lines")
    canvas.delete("percentage_counter")
    canvas.delete("progress_label")
    percentage_counter = f"{int(degrees / 3.6)}%"
    update_progress_gauge()

    canvas.delete("progress_text_complete")
    reset_button.pack_forget()
    pause_button.pack(side=RIGHT, padx=3, pady=5)
    
    canvas.create_text(300, 325, text="READY!", font=("Arial", 22, "bold"), fill="white", tags="ready_label")

def restart_progress():
    global degrees, pause

    degrees = 0
    pause = True

    canvas.delete("progress_lines")
    update_progress_gauge()
    reset_button.pack_forget()
    pause_button.pack(side=RIGHT, padx=3, pady=5)

def play_sound():
    # Upon reaching 100, the Progress Bar will chime
    winsound.PlaySound("SystemAsterisk", winsound.SND_ALIAS)
    # Options: SystemAsterisk, SystemExclamation, SystemExit, SystemHand, SystemQuestion

def update_progress_gauge():
    global canvas, degrees, pause, window

    if pause:
        pass
    else:
        if degrees < 360:  # Stop Progress Gauge at 100%
            new_degrees = degrees + 1

            degrees = new_degrees

            #canvas.delete("progress_lines")    # Not if you wan the Progress Gauge to fill
            canvas.delete("percentage_counter")  # Prevent text updates from piling up
            
            canvas.create_line(300, 300, 300 + 150 * sin(radians(degrees)),
                               300 - 150 * cos(radians(degrees)),
                               fill="deep sky blue", width=20, tags="progress_lines")

            percentage_counter = f"{int(degrees / 3.6)}%"
            canvas.create_text(300, 275, text=percentage_counter, font=("Arial", 42, "bold"), fill="deep sky blue",
                               tags="percentage_counter")

            canvas.tag_lower("progress_lines")

            canvas.delete("progress_text_complete")
            canvas.create_text(300, 325, text="PROGRESS", font=("Arial", 22, "bold"), fill="white", tags="progress_label")

            window.after(20, update_progress_gauge)

        else:
            play_sound()
            canvas.delete("progress_label")
            canvas.create_text(300, 325, text="COMPLETE!", font=("Arial", 22, "bold"), fill="white",
                               tags="progress_text_complete")
            pause_button.pack_forget()
            reset_button.pack(side=RIGHT, padx=3, pady=5)
            reset_button.config(command=reset_progress)


if __name__ == "__main__":
    create_interface()


