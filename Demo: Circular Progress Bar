"""
Circular Progress Bar

The challenge is to create a circular progress gauge that counts up from 0 to 
100 in Python using the Tkinter library.  Every example of Circular Progress 
Bars I could find on Youtube made use of Pyside or PyQT.  I'm currently teaching
myself Tkinter, and I'm interested in seeing if the same effect can be 
established with plain vanilla Tkinter and some math.
"""

from tkinter import Button, Canvas, Frame, Tk, ttk
from math import cos, radians, sin

def create_interface():
    global canvas, degrees, window, progress_paused

    degrees = 0  # Will be divided into percentage in update_progress_gauge
    progress_paused = True

    window = create_window()
    canvas = create_progress_gauge(window)
    create_buttons(window)
    window.mainloop()

def create_progress_gauge(window):
    frame = Frame(window, height=600, width=600, bg="black", relief="sunken")
    frame.grid(columnspan=2, row=0)

    canvas = Canvas(frame, bg="black", width=585, height=585, relief="raised", bd=1)
    canvas.grid(padx=5, pady=5)

    # Draw the circular outlines of the gauge
    canvas.create_oval(100, 100, 500, 500, fill="", outline="", width=5, tag="outline")
    canvas.create_oval(150, 150, 450, 450, fill="", outline="dark violet", width=6, tag="outline")
    canvas.create_oval(180, 180, 420, 420, fill="black", outline="dark violet", width=6, tag="outline")
    canvas.tag_raise('outline')

    return canvas

def create_window():
    window = Tk()
    window.title("Demo: Circular Progress Gauge")
    window.geometry("600x650+100+100")
    window.configure(bg="#000000")

    return window

def create_buttons(window):
    global pause_button

    start_button = Button(window, text="Start", bg="green2", width=20, command=start_progress)
    start_button.grid(column=0, row=1, padx=3, pady=5)

    pause_button = Button(window, text="Pause", bg="red", width=20, command=pause_progress)
    pause_button.grid(column=1, row=1, padx=3, pady=5)

def start_progress():
    global progress_paused
    progress_paused = False
    update_progress_gauge()

def pause_progress():
    global progress_paused

    if progress_paused:
        # If paused, restart the progress
        start_progress()
        pause_button.configure(text="Pause")
    else:
        # If running, pause the progress
        progress_paused = True
        pause_button.configure(text="Restart")

def restart():
    global degrees, progress_paused
    degrees = 0
    progress_paused = True
    pause_button.configure(text="Pause")

def update_progress_gauge():
    global canvas, degrees, window, progress_paused

    if not progress_paused:
        new_degrees = degrees + 1

        # Check if the progress has crossed the 360-degree mark (100%)
        if degrees >= 360 and new_degrees < 360:  # 360 degrees = 100%
            canvas.delete("progress_text_complete")
            canvas.create_text(300, 325, text="PROGRESS", font=("Arial", 22, "bold"), fill="white", tags="progress_text")

        degrees = new_degrees

        canvas.delete("progress_text")  # Prevent text updates from piling up

        # Draw progress lines
        canvas.create_line(300, 300, 300 + 150 * sin(radians(degrees)),
                           300 - 150 * cos(radians(degrees)),
                           fill="deep sky blue", width=20, tags="progress_lines")

        # Display progress text
        progress_text = f"{int(degrees / 3.6)}%"
        canvas.create_text(300, 275, text=progress_text, font=("Arial", 42, "bold"), fill="deep sky blue", tags="progress_text")

        # Announce countdown is complete at 360 degrees (100%) and update the text accordingly
        if degrees >= 360:  # 360 degrees = 100%
            canvas.create_text(300, 325, text="COMPLETE!", font=("Arial", 22, "bold"), fill="white", tags="progress_text_complete")
            restart()  # Reset the progress when it reaches 360 degrees

        canvas.tag_lower("progress_lines")

        window.after(20, update_progress_gauge)  # Adjust the delay time as needed

if __name__ == "__main__":
    create_interface()

