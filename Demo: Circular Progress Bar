"""
Circular Progress Bar

The challenge is to create a circular progress gauge that counts up from 0 to 
100 in Python using the Tkinter library.  Every example of Circular Progress 
Bars I could find on Youtube made use of Pyside or PyQT.  I'm currently teaching
myself Tkinter, and I'm interested in seeing if the same effect can be 
established with plain vanilla Tkinter and some math.
"""

from tkinter import Button, Canvas, Frame, LEFT, messagebox, RIGHT, Tk
from math import cos, radians, sin
import winsound

degrees = 0
pause = False
center_x = 0
center_y = 0
outer_radius = 0

def confirmation_messagebox():
    result = messagebox.askyesno("Confirmation", "Would you like to restart the Progress Gauge?")
    
    if result:
        # User clicks 'Yes' button
        reset_progress()
    else:
        # User clicks 'No' button
        message_box = messagebox.showinfo("Exit Message", "Thanks for trying out our Circular Progress Gauge!")
    
        # Delay for a few seconds, then close the application
        window.after(3000, window.destroy)

def create_interface():
    global canvas, degrees, window, pause_button, reset_button, start_button

    degrees = 0  # Will be divided into a percentage in update_progress_gauge
    pause = True

    window = create_window()
    canvas = create_progress_gauge(window)
    create_buttons(window)
    window.mainloop()

def create_progress_gauge(window):
    global center_x, center_y, outer_radius

    frame = Frame(window, bg="black", relief="sunken")
    frame.pack(fill="both", expand=True)

    canvas_size = 375
    canvas = Canvas(frame, bg="black", width=canvas_size, height=canvas_size, relief="raised", bd=1)
    canvas.pack(padx=5, pady=5, fill="both", expand=True)

    center_x = canvas_size // 2
    center_y = canvas_size // 2
    outer_radius = canvas_size // 2 - 10

    # Draw the circular outlines of the gauge
    canvas.create_oval(center_x - outer_radius, center_y - outer_radius,
                       center_x + outer_radius, center_y + outer_radius,
                       fill="", outline="", width=5, tag="outline")

    inner_radius = outer_radius - 30

    canvas.create_oval(center_x - inner_radius, center_y - inner_radius,
                       center_x + inner_radius, center_y + inner_radius,
                       fill="", outline="dark violet", width=6, tag="outline")

    canvas.create_oval(center_x - 30, center_y - 30,
                       center_x + 30, center_y + 30,
                       fill="black", outline="dark violet", width=6, tag="outline")

    canvas.tag_raise('outline')

    progress_text = "0%"
    canvas.create_text(center_x, center_y - 25, text=progress_text, font=("Arial", 42, "bold"),
                       fill="deep sky blue", tags="percentage_counter")

    canvas.create_text(center_x, center_y + 25, text="READY!", font=("Arial", 22, "bold"),
                       fill="white", tags="ready_label")

    return canvas

def create_window():
    window = Tk()
    window.title("Demo: Circular Progress Gauge")

    # Calculate the window dimensions based on the gauge size
    gauge_size = 375
    window_width = gauge_size + 20  # Add padding
    window_height = gauge_size + 70  # Add padding and space for buttons

    window.geometry(f"{window_width}x{window_height}+100+100")
    window.configure(bg="#000000")

    return window

def create_buttons(window):
    global pause_button, reset_button, start_button

    button_width = 20

    start_button = Button(window, text="Start", font=("Arial", 12), bg="green2", command=start_progress, width=button_width)
    start_button.pack(side=LEFT, padx=3, pady=5)

    pause_button = Button(window, text="Pause", font=("Arial", 12), bg="yellow", command=pause_progress, width=button_width)
    pause_button.pack(side=RIGHT, padx=3, pady=5)

    reset_button = Button(window, text="Reset", font=("Arial", 12), bg="red", command=reset_progress, width=button_width)
    #reset_button.pack(side=RIGHT, padx=3, pady=5)

def start_progress():
    global pause, degrees

    pause = False
    canvas.delete("ready_label")
    update_progress_gauge()

    if degrees == 360:
        confirmation_messagebox()
    else:
        reset_button.pack_forget()
        pause_button.pack(side=RIGHT, padx=3, pady=5)
        pause_button.config(command=pause_progress)

def pause_progress():
    global pause

    pause = True

    if degrees == 0 or degrees == 360:
        pass
    else:
        pause_button.pack_forget()
        reset_button.pack(side=RIGHT, padx=3, pady=5)

def reset_progress():
    global degrees, pause

    if pause or degrees == 360:
        degrees = 0
        pause = True
    
        canvas.delete("progress_lines")
        canvas.delete("percentage_counter")
        canvas.delete("progress_label")
        progress_text = "0%"
        canvas.create_text(center_x, center_y - 25, text=progress_text, font=("Arial", 42, "bold"),
                           fill="deep sky blue", tags="percentage_counter")

        canvas.create_text(center_x, center_y + 25, text="READY!", font=("Arial", 22, "bold"),
                           fill="white", tags="ready_label")
        
        update_progress_gauge()
    
        canvas.delete("progress_text_complete")
        reset_button.pack_forget()
        pause_button.pack(side=RIGHT, padx=3, pady=5)
        
        canvas.create_text(center_x, center_y + 25, text="READY!", font=("Arial", 22, "bold"),
                           fill="white", tags="ready_label")
    else:
        pass

def restart_progress():
    global degrees, pause

    degrees = 0
    pause = True

    canvas.delete("progress_lines")
    update_progress_gauge()
    reset_button.pack_forget()
    pause_button.pack(side=RIGHT, padx=3, pady=5)

def play_sound():
    # Upon reaching 100, the Progress Bar will chime
    winsound.PlaySound("SystemAsterisk", winsound.SND_ALIAS)
    # Options: SystemAsterisk, SystemExclamation, SystemExit, SystemHand, SystemQuestion

def update_progress_gauge():
    global canvas, degrees, pause, window, center_x, center_y

    if pause:
        pass
    else:
        if degrees < 360:  # Stop Progress Gauge at 100%
            new_degrees = degrees + 1

            degrees = new_degrees

            #canvas.delete("progress_lines")    # Not if you want the Progress Gauge to fill
            canvas.delete("percentage_counter")  # Prevent text updates from piling up
            
            canvas.create_line(center_x, center_y,
                               center_x + (outer_radius - 10) * sin(radians(degrees)),
                               center_y - (outer_radius - 10) * cos(radians(degrees)),
                               fill="deep sky blue", width=20, tags="progress_lines")

            percentage_counter = f"{int(degrees / 3.6)}%"
            canvas.create_text(center_x, center_y - 25, text=percentage_counter, font=("Arial", 42, "bold"),
                               fill="deep sky blue", tags="percentage_counter")

            canvas.tag_lower("progress_lines")

            canvas.delete("progress_text_complete")
            canvas.create_text(center_x, center_y + 25, text="PROGRESS", font=("Arial", 22, "bold"),
                               fill="white", tags="progress_label")

            window.after(20, update_progress_gauge)

        else:
            play_sound()
            canvas.delete("progress_label")
            canvas.create_text(center_x, center_y + 25, text="COMPLETE!", font=("Arial", 22, "bold"),
                               fill="white", tags="progress_text_complete")
            pause_button.pack_forget()
            reset_button.pack(side=RIGHT, padx=3, pady=5)
            reset_button.config(command=reset_progress)

if __name__ == "__main__":
    create_interface()

