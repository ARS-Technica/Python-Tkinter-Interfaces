import tkinter as tk
from tkinter import ttk, colorchooser, filedialog

# Define color schemes
color_schemes = {
    "Default": {"bg": "white", "fg": "black", "frame": "gray"},
    "Dark": {"bg": "black", "fg": "white", "frame": "darkgray"},
    "Ocean": {"bg": "#007acc", "fg": "white", "frame": "#005fa3"},
    "Forest": {"bg": "#116611", "fg": "white", "frame": "#0a440a"},
}

def toggle_dark_mode():
    """Toggle Dark Mode by changing background and text colors."""
    global is_dark_mode
    if is_dark_mode:
        apply_color_scheme("Default")
        status_var.set("Light Mode")
        is_dark_mode = False
    else:
        apply_color_scheme("Dark")
        status_var.set("Dark Mode")
        is_dark_mode = True

def choose_custom_palette():
    """Change the color scheme of the text editor using a color chooser."""
    chosen_color = colorchooser.askcolor(title="Choose Custom Palette")[1]
    if chosen_color:
        apply_custom_palette(chosen_color)

def apply_color_scheme(scheme_name):
    """Apply a predefined color scheme to the text editor and other widgets."""
    scheme = color_schemes.get(scheme_name)
    if scheme:
        text_widget.config(bg=scheme["bg"], fg=scheme["fg"])
        button_frame.config(bg=scheme["frame"])
        status_bar.config(bg=scheme["frame"])
        root.config(bg=scheme["frame"])
        for widget in [dark_mode_button, color_scheme_button, open_button, save_button]:
            widget.config(style="TButton", foreground=scheme["fg"], background=scheme["bg"])

def apply_custom_palette(chosen_color):
    """Apply a custom color palette to the text editor and other widgets."""
    text_widget.config(bg=chosen_color)
    button_frame.config(bg=chosen_color)
    status_bar.config(bg=chosen_color)
    root.config(bg=chosen_color)
    for widget in [dark_mode_button, color_scheme_button, open_button, save_button]:
        widget.config(style="TButton", foreground="black", background=chosen_color)

def open_file():
    """Open a text file and display its content in the text editor."""
    file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
    if file_path:
        with open(file_path, "r") as file:
            text_widget.delete(1.0, tk.END)
            text_widget.insert(tk.END, file.read())
        status_var.set(f"Opened: {file_path}")

def save_file():
    """Save the content of the text editor to a text file."""
    file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt")])
    if file_path:
        with open(file_path, "w") as file:
            file.write(text_widget.get(1.0, tk.END))
        status_var.set(f"Saved: {file_path}")

# Create the main window
root = tk.Tk()
root.title("Text Editor")

# Create a menubar
menubar = tk.Menu(root)
root.config(menu=menubar)

# Create "Options" menu
options_menu = tk.Menu(menubar, tearoff=0)
menubar.add_cascade(label="Options", menu=options_menu)
options_menu.add_command(label="Toggle Dark Mode", command=toggle_dark_mode)
options_menu.add_command(label="Custom Palette", command=choose_custom_palette)
options_menu.add_separator()

# Create "Color Scheme" submenu
color_scheme_menu = tk.Menu(options_menu, tearoff=0)
options_menu.add_cascade(label="Color Scheme", menu=color_scheme_menu)
for scheme_name in color_schemes:
    color_scheme_menu.add_command(label=scheme_name, command=lambda name=scheme_name: apply_color_scheme(name))

# Create "Files" menu
files_menu = tk.Menu(menubar, tearoff=0)
menubar.add_cascade(label="Files", menu=files_menu)
files_menu.add_command(label="Open", command=open_file)
files_menu.add_command(label="Save", command=save_file)

# Create a frame for buttons
button_frame = ttk.Frame(root)
button_frame.grid(row=0, column=0, columnspan=2, pady=5)

# Create buttons
dark_mode_button = ttk.Button(button_frame, text="Toggle Dark Mode", command=toggle_dark_mode)
color_scheme_button = ttk.Button(button_frame, text="Choose Custom Palette", command=choose_custom_palette)
open_button = ttk.Button(button_frame, text="Open", command=open_file)
save_button = ttk.Button(button_frame, text="Save", command=save_file)

# Grid layout for buttons
dark_mode_button.grid(row=0, column=0, padx=5)
color_scheme_button.grid(row=0, column=1, padx=5)
open_button.grid(row=0, column=2, padx=5)
save_button.grid(row=0, column=3, padx=5)

# Create a text widget
text_widget = tk.Text(root, wrap="word")
text_widget.grid(row=1, column=0, columnspan=2, sticky="NSEW")

# Add a scrollbar
scrollbar = tk.Scrollbar(root, command=text_widget.yview)
scrollbar.grid(row=1, column=2, sticky="NS")
text_widget.config(yscrollcommand=scrollbar.set)

# Create a status bar
status_var = tk.StringVar()
status_var.set("Light Mode")
status_bar = ttk.Label(root, textvariable=status_var, anchor="w")
status_bar.grid(row=2, column=0, columnspan=3, sticky="EW")

# Configure grid layout behavior
root.grid_rowconfigure(1, weight=1)
root.grid_columnconfigure(0, weight=1)

# Set default Dark Mode state
is_dark_mode = False

# Apply default color scheme
apply_color_scheme("Default")

# Run the application
root.mainloop()
