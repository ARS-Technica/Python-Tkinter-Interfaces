from tkinter import *
from tkinter import ttk, colorchooser, filedialog

# Create BooleanVar variables for checkbuttons
checkbutton_vars = {}

# Define color schemes
color_schemes = {
    "Red": "red",
    "Green": "green",
    "Blue": "blue"
}
dark_mode_scheme = {"Dark Mode": "gray"}
default_color_scheme = {"Default": "white"}

def checkbutton_selected(scheme_name):
    var = checkbutton_vars[scheme_name]
    if var.get():
        for name, v in checkbutton_vars.items():
            if name != scheme_name:
                v.set(False)
        if scheme_name == "Dark Mode":
            text_widget.config(bg=dark_mode_scheme["Dark Mode"])  # Set text widget background to gray
        else:
            text_widget.config(bg=color_schemes[scheme_name])
    else:
        var.set(False)
        update_text_widget_color()

def update_text_widget_color():
    active_scheme_names = [name for name, var in checkbutton_vars.items() if var.get()]
    
    if not active_scheme_names:
        text_widget.config(bg=default_color_scheme["Default"])
    else:
        text_widget.config(bg=color_schemes[active_scheme_names[0]])

# Store the custom color
selected_custom_color = None

def choose_custom_palette(*args):
    """Toggle the custom color palette based on the state of the checkbutton."""
    global selected_custom_color  # Declare that we are using the global variable
    
    if custom_palette_var.get():
        chosen_color = colorchooser.askcolor(title="Choose Custom Palette")[1]
        if chosen_color:
            selected_custom_color = chosen_color
            text_widget.config(bg=chosen_color)
    else:
        active_color_scheme = None
        for scheme_name, var in checkbutton_vars.items():
            if var.get() and scheme_name != "Dark Mode":
                active_color_scheme = scheme_name
                break
        
        if var_dark_mode.get():
            text_widget.config(bg=dark_mode_scheme["Dark Mode"])
        elif active_color_scheme:
            text_widget.config(bg=color_schemes[active_color_scheme])
        elif selected_custom_color:
            text_widget.config(bg=selected_custom_color)
        else:
            text_widget.config(bg=default_color_scheme["Default"])


# File Menu Functions
def open_file():
    """Open a text file and display its content in the text editor."""
    file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
    if file_path:
        with open(file_path, "r") as file:
            text_widget.delete(1.0, END)
            text_widget.insert(END, file.read())
        status_var.set(f"Opened: {file_path}")

def save_file():
    """Save the content of the text editor to a text file."""
    file_path = filedialog.asksaveasfilename(defaultextension=".txt", filetypes=[("Text Files", "*.txt")])
    if file_path:
        with open(file_path, "w") as file:
            file.write(text_widget.get(1.0, END))
        status_var.set(f"Saved: {file_path}")

# Create the main window
root = Tk()
root.title("Text Editor")

# Create a style for the themed widgets
style = ttk.Style()

# Create a style for the themed widgets
style = ttk.Style()

# Configure style for the "TButton" widget
style.configure("Custom.TButton", foreground="black", font=("Helvetica", 12))

# Configure style for the "CustomStatus.TLabel" widget (status bar)
style.configure("CustomStatus.TLabel", foreground="black", font=("Helvetica", 12))

# Configure style for the "Custom.TFrame" widget (button_frame and root)
style.configure("Custom.TFrame", background="gray")

# Create a drop-down menu
menu_bar = Menu(root)
root.config(menu=menu_bar)

# Create "Files" menu
files_menu = Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="Files", menu=files_menu)
files_menu.add_command(label="Open", command=open_file)
files_menu.add_command(label="Save", command=save_file)

# Create "Options" menu
submenu = Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="Options", menu=submenu)

for scheme_name in color_schemes:
    var = BooleanVar()
    checkbutton_vars[scheme_name] = var
    submenu.add_checkbutton(label=scheme_name, variable=var, command=lambda name=scheme_name: checkbutton_selected(name))

submenu.add_separator()

# Add "Dark Mode" checkbutton
var_dark_mode = BooleanVar()
checkbutton_vars["Dark Mode"] = var_dark_mode
submenu.add_checkbutton(label="Dark Mode", variable=var_dark_mode, command=lambda name="Dark Mode": checkbutton_selected(name))

'''
# Add "Choose Custom Palette" option
custom_palette_var = BooleanVar()
submenu.add_checkbutton(label="Choose Custom Palette", variable=custom_palette_var)

# Bind the choose_custom_palette function to the trace of the custom_palette_var
custom_palette_var.trace("w", lambda *args: choose_custom_palette())
'''

'''
# Add "Choose Custom Palette" option
custom_palette_var = BooleanVar()
submenu.add_checkbutton(label="Choose Custom Palette", variable=custom_palette_var, command=choose_custom_palette)
'''

def set_custom_color():
    chosen_color = colorchooser.askcolor(title="Choose Custom Palette")[1]
    if chosen_color:
        text_widget.config(bg=chosen_color)

# Add "Choose Custom Palette" option
custom_palette_var = BooleanVar()
submenu.add_checkbutton(label="Choose Custom Palette", variable=custom_palette_var, command=set_custom_color)

# Create a frame for buttons with background color
button_frame = ttk.Frame(root, style="Custom.TFrame")
button_frame.grid(row=0, column=0, columnspan=2, pady=5, sticky="EW")

# Create buttons
color_scheme_button = ttk.Button(button_frame, text="Choose Custom Palette", command=choose_custom_palette, style="Custom.TButton")
open_button = ttk.Button(button_frame, text="Open", command=open_file, style="Custom.TButton")
save_button = ttk.Button(button_frame, text="Save", command=save_file, style="Custom.TButton")

# Grid layout for buttons
color_scheme_button.grid(row=0, column=0, padx=5)
open_button.grid(row=0, column=1, padx=5)
save_button.grid(row=0, column=2, padx=5)

# Create a text widget
text_widget = Text(root, bg=default_color_scheme["Default"], width=30, height=30)
text_widget.grid(row=1, column=0, columnspan=2, sticky="NSEW")

# Add a scrollbar
scrollbar = Scrollbar(root, command=text_widget.yview)
scrollbar.grid(row=1, column=2, sticky="NS")
text_widget.config(yscrollcommand=scrollbar.set)

# Create a status bar
status_var = StringVar()
status_var.set("Text Editor Ready")
status_bar = ttk.Label(root, textvariable=status_var, anchor="w")
status_bar.grid(row=2, column=0, columnspan=3, sticky="EW")

# Configure grid layout behavior
root.grid_rowconfigure(1, weight=1)
root.grid_columnconfigure(0, weight=1)

# Create an empty label as a separator
separator_label = ttk.Label(button_frame)
separator_label.grid(row=0, column=3, padx=5)

# Start the main loop
root.mainloop()

