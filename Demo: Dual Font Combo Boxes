"""
A demonstration of how to alter the font and size of text on a text widget with
a pair of combo boxes.  The combo boxes alter all text, not just selected text.
"""

 
import tkinter as tk
from tkinter import filedialog
from tkinter import font
from tkinter import ttk


# Initialize font_counter
global font_counter
font_counter = 0


"""
# FORMAT BAR METHODS
def change_font(event): # current_font_family
    # Get the selected font family from the combobox
    selected_font_family = all_fonts.get()

    # Check if any text is selected
    if text.tag_ranges("sel"):
        # Remove previous font family tags from the selected range
        for tag in text.tag_names("sel.first"):
            if tag == "font_family":
                text.tag_remove(tag, "sel.first", "sel.last")

        # Apply font family tag to the selected text
        font_family_tag = "font_family_" + selected_font_family
        text.tag_add(font_family_tag, "sel.first", "sel.last")

        # Configure the font family tag
        text.tag_configure(font_family_tag, font=(selected_font_family, current_font_size))
    else:
        # Alert the user that no text has been selected
        messagebox.showinfo("alert", "No text has been selected")
"""

# FORMAT BAR METHODS
def update_font(event=None):
    selected_font = font.Font(family=font_family_combo.get(), size=int(font_size_combo.get()))
    text.tag_configure("custom_font_{}".format(font_counter), font=selected_font)
    apply_font_style()

def apply_font_style(event=None):
    global font_counter

    # Check if any text is selected
    if text.tag_ranges("sel"):
        start = text.index("sel.first")
        end = text.index("sel.last")
        
        # Apply font styling to the selected text
        text.tag_add("custom_font_{}".format(font_counter), start, end)

        # Increment font_counter for next font style
        font_counter += 1

    else:
        # Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")      
    
"""
def update_font_combobox(event):
    # Get the index of the clicked position
    cursor_pos = text.index("@{},{}".format(event.x, event.y))

    # Get the tag names associated with the cursor position
    tag_names = text.tag_names(cursor_pos)

    if tag_names:
        # Get the font attribute configured for the clicked position
        font_attr = text.tag_cget(tag_names[0], "font") 

        # Check if the font attribute is not empty and contains the font family
        if font_attr:
            # Use regular expression to find the font face in the font attribute
            # font_face_match = re.search(r"family='([^']+)'", font_attr)  # Search for the font name directly
            font_face_match = re.search(r"'?([\w\s]+)'?", font_attr)  # Search for any word characters and whitespaces
            # Searches for any word characters and whitespaces enclosed within single quotes (')
            
            # Check if the font face match is found
            if font_face_match:
                # Extract the font face from the matched string
                font_face = font_face_match.group(1)  # Use group(1) to get the captured group

                # Set the font combobox to display the font face
                all_fonts.set(font_face.strip())  # Remove leading and trailing whitespaces if any
"""

def update_comboboxes(event):
    # Get the index of the clicked position    
    cursor_position = text.index("@{},{}".format(event.x, event.y))

    # Get the tag names associated with the cursor position    
    tags = text.tag_names(cursor_position)
    
    # Check if the font attribute is not empty and contains the font family
    if tags:
        # Iterate through tags to find the font attributes
        for tag in tags:
            if tag.startswith("custom_font_"):
                font_info = text.tag_cget(tag, "font")

                family = font.Font(font=font_info).actual()["family"]
                size = font.Font(font=font_info).actual()["size"]

                font_family_combo.set(family)
                font_size_combo.set(size)

# Create the main window
root = tk.Tk()
root.title("Font Selector")

# Create a text widget to display font changes
text = tk.Text(root, wrap="word")
text.pack(fill="both", expand=True)

# Fonts
font_families = list(font.families())

# Create a combo box for font selection
font_family_label = ttk.Label(root, text="Font Family:")
font_family_label.pack()
font_family_combo = ttk.Combobox(root, values=font_families)
font_family_combo.pack()
font_family_combo.set(font_families[0])

# Create a combo box for font size selection
font_size_label = ttk.Label(root, text="Font Size:")
font_size_label.pack()
font_size_combo = ttk.Combobox(root, values=list(range(8, 72)))
font_size_combo.pack()
font_size_combo.set("12")

# Bind events to update the font
font_family_combo.bind("<<ComboboxSelected>>", update_font)
font_size_combo.bind("<<ComboboxSelected>>", update_font)

# Bind event to apply font style when text is selected
text.bind("<Button-1>", update_comboboxes)

root.mainloop()

