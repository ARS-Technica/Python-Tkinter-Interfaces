"""
A demonstration of how to alter the font and size of text on a text widget with
a pair of combo boxes.  The combo boxes alter all text, not just selected text.
"""									   
								   

import tkinter as tk
from tkinter import filedialog
from tkinter import font
from tkinter import ttk

# Set default font
global default_family
default_family = "Arial"
global default_size
default_size = 12

# Initialize font_counter
global font_counter
font_counter = 0


# FORMAT BAR METHODS
def update_font(event=None):	   
    selected_font = font.Font(family=font_family_combo.get(), size=int(font_size_combo.get()))
    text.tag_configure("custom_font_{}".format(font_counter), font=selected_font)
    apply_font_style()

def apply_font_style(event=None):
    global font_counter
       
    # Check if any text is selected        
    if text.tag_ranges("sel"):
        start = text.index("sel.first")
        end = text.index("sel.last")
        current_tags = text.tag_names("sel.first")

        if any(tag.startswith("custom_font_") for tag in current_tags):
            # If the selected text already has font styling tags, add bold property to the existing tag
            text.tag_add("bold", start, end)
        else:
            # If the selected text doesn't have font styling tags, create a new tag with bold property
            
            # Apply font styling to the selected text
            text.tag_add("custom_font_{}".format(font_counter), start, end)
            text.tag_configure("custom_font_{}".format(font_counter), font=(font_family_combo.get(), int(font_size_combo.get())), bold=True)

        # Increment font_counter for next font style
        font_counter += 1

    else:
        # Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")      

def update_comboboxes(event):
    # Get the index of the clicked position    
    cursor_position = text.index("@{},{}".format(event.x, event.y))

    # Get the tag names associated with the cursor position    
    tags = text.tag_names(cursor_position)
    
    # Check if the font attribute is not empty and contains the font family
    if tags:
        # Iterate through tags to find the font attributes
        for tag in tags:
            if tag.startswith("custom_font_"):
                font_info = text.tag_cget(tag, "font")

                family = font.Font(font=font_info).actual()["family"]
                size = font.Font(font=font_info).actual()["size"]

                font_family_combo.set(family)
                font_size_combo.set(size)

    else:
        # Set the font and size comboboxes to display the default font and size
        font_family_combo.set(default_family)
        font_size_combo.set(default_size)

def toggle_bold():
    if text.tag_ranges("sel"):
        current_tags = text.tag_names("sel.first")
        if "bold" in current_tags:
            text.tag_remove("bold", "sel.first", "sel.last")
        else:
            apply_font_style()


# Create the main window
root = tk.Tk()
root.title("Font Selector")

  
# CREATING TEXT AREA - FIRST CREATED A FRAME AND THEN APPLIED TEXT OBJECT TO IT.
# Create a text widget to display font changes
text_frame = tk.Frame(root, borderwidth=1, padx=2, relief="sunken")
text = tk.Text(wrap="word", font=(default_family, default_size), background="white", borderwidth=0, highlightthickness=0 , undo= True)
text.focus_set()
text.pack(in_=text_frame, side="left", fill="both", expand=True) # pack text object.


# Text for Debugging
text.insert("end", "This first sentence tests the bold formatting feature.\n")
text.insert("end", "\n")
text.insert("end", "This second sentence tests the italics formatting feature.\n")
text.insert("end", "\n")
text.insert("end", "This third sentence demonstrates the ability to underline words.\n")
text.insert("end", "\n")


# PACK TOOLBAR, FORMATBAR, STATUSBAR AND TEXT FRAME.
formattingbar = tk.Frame(root, padx=2, pady=2)											
formattingbar.pack(side="top", fill="x")
text_frame.pack(side="bottom", fill="both", expand=True)
text.focus_set()


# Get all font families
font_families = list(font.families())


# Create a combo box for font selection
font_family_label = ttk.Label(root, text="Font Family:")
font_family_label.pack(side="left") 
font_family_combo = ttk.Combobox(root, values=font_families)
font_family_combo.pack(side="left", padx=4, pady=4)

if default_family in font_families:  # Check that the default font is installed
    font_family_combo.set(default_family)
else:
    font_family_combo.set(font_families[0])  # Set the first available font as default


# Create a combo box for font size selection
font_size_label = ttk.Label(root, text="Font Size:")
font_size_label.pack(side="left")
font_size_combo = ttk.Combobox(root, values=list(range(8, 72)))
font_size_combo.pack(side="left", padx=4, pady=4)
font_size_combo.set(default_size)

# Bind events to update the font
font_family_combo.bind("<<ComboboxSelected>>", update_font)
font_size_combo.bind("<<ComboboxSelected>>", update_font)

# Bind event to apply font style when text is selected
text.bind("<Button-1>", update_comboboxes)

# Button to toggle bold
bold_button = ttk.Button(root, text="Bold", command=toggle_bold)
bold_button.pack()

# Mainloop of the Program
root.mainloop()

