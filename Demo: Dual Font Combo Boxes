"""
A demonstration of how to alter the font and size of text on a text widget with
a pair of combo boxes.  The combo boxes alter all text, not just selected text.
"""

 
# Added Default Font (default_family = "Arial") and Size Variables (default_size = 12)
 
import tkinter as tk
from tkinter import filedialog
from tkinter import font
from tkinter import ttk

# Set default font
global default_family
default_family = "Arial"
global default_size
default_size = 12

# Initialize font_counter
global font_counter
font_counter = 0


# FORMAT BAR METHODS
def update_font(event=None):
    selected_font = font.Font(family=font_family_combo.get(), size=int(font_size_combo.get()))
    text.tag_configure("custom_font_{}".format(font_counter), font=selected_font)
    apply_font_style()

def apply_font_style(event=None):
    global font_counter

    # Check if any text is selected
    if text.tag_ranges("sel"):
        start = text.index("sel.first")
        end = text.index("sel.last")
        
        # Apply font styling to the selected text
        text.tag_add("custom_font_{}".format(font_counter), start, end)

        # Increment font_counter for next font style
        font_counter += 1

    else:
        # Alert the user that no text has been selected
        tk.messagebox.showinfo("alert", "No text has been selected")      

"""
# I'm now using a regular expression (\d+) to find the font size in the font attribute so that it doesn't get truncated in the combobox.
def update_size_combobox(event):
    # Get the index of the clicked position
    cursor_pos = text.index("@{},{}".format(event.x, event.y))

    # Get the tag names associated with the cursor position
    tag_names = text.tag_names(cursor_pos)    

    if tag_names:
        # Get the font attribute configured for the clicked position
        font_attr = text.tag_cget(tag_names[0], "font")

        # Check that the font attribute is not empty and contains both font family and size
        if font_attr:
            # Use regular expression (\d+) to find the font size in the font attribute
            font_size_match = re.search(r'\d+', font_attr)

            if font_size_match:
                # Extract the font size from the matched string
                font_size = font_size_match.group()

                # Set the font size combobox to display the font size
                all_size.set(font_size)
                
    else:
        # Set the font size combobox to display the default font size
        all_size.set(default_size)
"""
  
def update_comboboxes(event):
    # Get the index of the clicked position    
    cursor_position = text.index("@{},{}".format(event.x, event.y))

    # Get the tag names associated with the cursor position    
    tags = text.tag_names(cursor_position)
    
    # Check if the font attribute is not empty and contains the font family
    if tags:
        # Iterate through tags to find the font attributes
        for tag in tags:
            if tag.startswith("custom_font_"):
                font_info = text.tag_cget(tag, "font")

                family = font.Font(font=font_info).actual()["family"]
                size = font.Font(font=font_info).actual()["size"]

                font_family_combo.set(family)
                font_size_combo.set(size)

    else:
        # Set the font and size comboboxes to display the default font and size
        font_family_combo.set(default_family)
        font_size_combo.set(default_size)

# Create the main window
root = tk.Tk()
root.title("Font Selector")

"""
# CREATING TEXT AREA - FIRST CREATED A FRAME AND THEN APPLIED TEXT OBJECT TO IT.
text_frame = Frame(root, borderwidth=1, relief="sunken")
text = Text(wrap="word", font=(default_font, default_size), background="white", borderwidth=0, highlightthickness=0 , undo= True)
text.pack(in_=text_frame, side="left", fill="both", expand=True) # pack text object.
"""

# Create a text widget to display font changes
text = tk.Text(root, wrap="word", font=(default_family, default_size), background="white", borderwidth=0, highlightthickness=0 , undo= True)
text.pack(fill="both", expand=True)

# Get all font families
font_families = list(font.families())


# Create a combo box for font selection
font_family_label = ttk.Label(root, text="Font Family:")
font_family_label.pack()
font_family_combo = ttk.Combobox(root, values=font_families)
font_family_combo.pack()

if default_family in font_families:  # Check that the default font is installed
    font_family_combo.set(default_family)
else:
    font_family_combo.set(font_families[0])  # Set the first available font as default


# Create a combo box for font size selection
font_size_label = ttk.Label(root, text="Font Size:")
font_size_label.pack()
font_size_combo = ttk.Combobox(root, values=list(range(8, 72)))
font_size_combo.pack()
font_size_combo.set("12")

# Bind events to update the font
font_family_combo.bind("<<ComboboxSelected>>", update_font)
font_size_combo.bind("<<ComboboxSelected>>", update_font)

# Bind event to apply font style when text is selected
text.bind("<Button-1>", update_comboboxes)

root.mainloop()

