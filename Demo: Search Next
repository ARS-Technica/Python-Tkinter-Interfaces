"""
The following code searches a text widget for all instances of a search term,
them scrolls up or down through each instance of that term.
"""

# Importing the tkinter module to create a GUI
from tkinter import *

# Creating a tkinter object called "root"
root = Tk()
# Setting the title of the GUI
root.title("Search App")

# Creating a Text widget and adding it to the GUI
text = Text(root, width=40, height=10, wrap=WORD)
text.pack(expand=YES, fill=BOTH)

# Creating an Entry widget for user to input search term
search_entry = Entry(root)
search_entry.pack(side=LEFT, padx=5, pady=5)

def find_all():
    search_text = search_entry.get()
    if search_text:
        start_pos = "1.0"
        while True:
            pos = text.search(search_text, start_pos, stopindex="end")
            if not pos:
                break
            end_pos = f"{pos}+{len(search_text)}c"
            text.tag_add("found", pos, end_pos)
            start_pos = end_pos
        text.tag_configure("found", background="yellow")

    # Keyboard shortcuts to Search or Close
    # search_dialog.bind("<Return>", lambda event: search_command())
    # search_dialog.bind("<Escape>", lambda event: search_dialog.destroy())

# Defining a function to search for the next occurrence of the search term
def find_next():
    """
    The search function finds all the positions of the search term in the text
    and compiles them into a list called search_positions. It also highlights
    the first instance of the search term and sets the current_result_index
    variable to -1.
    """
        
    # Declaring global variables
    global current_result_index
    global search_positions

    # Retrieving the search term from the Entry widget
    search_text = search_entry.get()

    # Searching for the search term in the Text widget and storing the positions in a list
    if search_text:
        start_pos = "1.0"
        if not search_positions:
            search_positions = []
            while True:
                pos = text.search(search_text, start_pos, stopindex="end")
                if not pos:
                    break
                end_pos = f"{pos}+{len(search_text)}c"
                text.tag_add("found", pos, end_pos)
                start_pos = end_pos
                search_positions.append(pos)
            # Configuring the "found" tag with a yellow background
            text.tag_configure("found", background="yellow")
            # Setting the current_result_index variable to 0 highlights SECOND instance
            current_result_index = -1
        # Highlighting the next occurrence of the search term
        if current_result_index < len(search_positions) - 1:
            current_result_index += 1
        else:
            current_result_index = 0
        next_result()

def find_previous():
    """
    The find_previous() function is similar to find_next() but searches backwards
    from the end of the text block.
    """
    global current_result_index
    global search_positions

    search_text = search_entry.get()

    if search_text:
        end_pos = "end-1c"
        if not search_positions:
            search_positions = []
            while True:
                pos = text.search(search_text, end_pos, stopindex="1.0", backwards=True)
                if not pos:
                    break
                end_pos = pos
                text.tag_add("found", pos, f"{pos}+{len(search_text)}c")
                search_positions.insert(0, pos)
            text.tag_configure("found", background="yellow")
            current_result_index = len(search_positions)
        if current_result_index > 0:
            current_result_index -= 1
        else:
            current_result_index = len(search_positions) - 1
        next_result()

# Defining a function to highlight the current occurrence of the search term
def next_result():
    # Declaring global variables
    global current_result_index
    global search_positions

    # Highlighting the current occurrence of the search term
    if search_positions:
        text.tag_remove("found", "1.0", "end")
        pos = search_positions[current_result_index]
        text.tag_add("found", pos, f"{pos}+{len(search_entry.get())}c")
        text.mark_set("insert", pos)
        text.see(pos)

# Clear Find results to start over
def clear_find_results(event=None):
    # "event=None" is the secret sauce that makes keybinding work
    global current_result_index
    global search_positions

    if "found" in text.tag_names():
        # Remove results highlighting
        text.tag_remove("found", "1.0", "end")
        # Reset global variables to default for new search
        search_positions = []
        current_result_index = -1
    """
    else:
        pass
    """

# Clear search results with clear_find_results upon entering new text in widget
search_entry.bind("<KeyRelease>", clear_find_results)

# Creating a Button widgets to initiate the search and highlighting
# Search down the text widget from the top
search_button = Button(root, text="Find Next", command=find_next)
search_button.pack(side=LEFT, padx=5, pady=5)

# Search up the text widget from the bottom
search_button = Button(root, text="Find Prev", command=find_previous)
search_button.pack(side=LEFT, padx=5, pady=5)

clear_search_button = Button(root, text="Clear Search", command=clear_find_results) 
clear_search_button.pack(side="left", padx=2, pady=2)

# Add invisible button to create space between button groups
space_button = Button(root, text="",
                      padx=5, pady=5, relief="flat", width=5, state='disabled')
space_button.pack(side="left", padx=2, pady=2)

search_button = Button(root, text="Find All", command=find_all) 
search_button.pack(side="left", padx=2, pady=2)

# Initializing the search_positions list and current_result_index variable
search_positions = []
current_result_index = -1

# Test text for the purposes of debugging
text.insert("end", "one\ntwo\nthree\n")
text.insert("end", "four\n", ("bigfont",))
text.insert("end", "five\nsecond two\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthree two")
text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfour two")
text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfive two")
text.tag_configure("bigfont", font=("Helvetica", "24", "bold")) 

# Running the GUI
root.mainloop()

