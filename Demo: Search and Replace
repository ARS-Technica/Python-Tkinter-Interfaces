"""
A Simple set of Functions to act as a Search and Replace feature inside a Notebook app.
"""

from tkinter import *

def find_and_replace():
    dialog = Toplevel(root)
    dialog.title("Find and Replace")
    
    find_term = StringVar()
    replace_term = StringVar()
    match_case = IntVar()
    whole_words = IntVar()
    
    COUNT = IntVar()
    COUNT.set(0)
    
    def find():
        find_text = find_term.get()
        if not find_text:
            return
        options = ''
        if match_case.get():
            options += 'd'
        if whole_words.get():
            options += 'w'
        text.tag_remove('found', '1.0', END)
        idx = '1.0'
        while 1:
            idx = text.search(find_text, idx, nocase=not match_case.get(), stopindex=END, count=options)
            if not idx:
                break
            lastidx = f"{idx}+{len(find_text)}c"
            text.tag_add('found', idx, lastidx)
            idx = lastidx
        text.tag_config('found', foreground='green', background='yellow')

    def find_all():
        find()
    
    def replace():
        text_widget = text
        find_term_entry = find_term.get()
        replace_term_entry = replace_term.get()
        options = ""
    
        if match_case.get():
            options += 'd'
    
        if whole_words.get():
            options += 'w'
        
        if find_term_entry:
            while True:
                start = text_widget.search(find_term_entry, "1.0", stopindex="end", count=COUNT, options=options)
                if not start:
                    break
                end = text_widget.index(f"{start}+{len(find_term_entry)}c")
                text_widget.delete(start, end)
                text_widget.insert(start, replace_term_entry)
    
    def replace_all():
        text_widget = text
        find_term_entry = find_term.get()
        replace_term_entry = replace_term.get()
        options = ""
    
        if match_case.get():
            options += 'd'
    
        if whole_words.get():
            options += 'w'
    
        if find_term_entry:
            while True:
                start = text_widget.search(find_term_entry, "1.0", stopindex="end", count=COUNT, options=options)
                if not start:
                    break
                end = text_widget.index(f"{start}+{len(find_term_entry)}c")
                text_widget.delete(start, end)
                text_widget.insert(start, replace_term_entry)
    
    Label(dialog, text="Find: ").grid(row=0, column=0, padx=5, pady=5, sticky=W)
    Entry(dialog, textvariable=find_term).grid(row=0, column=1, padx=5, pady=5)
    Button(dialog, text="Find", command=find, width=10).grid(row=0, column=2, padx=5, pady=5)
    Button(dialog, text="Find All", command=find_all, width=10).grid(row=0, column=3, padx=5, pady=5)
    
    Label(dialog, text="Replace: ").grid(row=1, column=0, padx=5, pady=5, sticky=W)
    Entry(dialog, textvariable=replace_term).grid(row=1, column=1, padx=5, pady=5)
    Button(dialog, text="Replace", command=replace, width=10).grid(row=1, column=2, padx=5, pady=5)
    Button(dialog, text="Replace All", command=replace_all, width=10).grid(row=1, column=3, padx=5, pady=5)
    
    Checkbutton(dialog, text="Match Case", variable=match_case).grid(row=0, column=4, padx=5, pady=5, sticky=W)
    Checkbutton(dialog, text="Whole Words", variable=whole_words).grid(row=1, column=4, padx=5, pady=5, sticky=W)
    
    find_term.set('')
    replace_term.set('')

root = Tk()
text = Text(root)
#text.insert('1.0', '''Type your text here''')

# Test text for the purposes of debugging
text.insert("end", "one\ntwo\nthree\n")
text.insert("end", "four\n", ("bigfont",))
text.insert("end", "five\nsecond two\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n")
text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nthree two")
text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfour two")
text.insert("end", "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfive two")

text.pack(side=BOTTOM)

menu_bar = Menu(root)
root.config(menu=menu_bar)
submenu = Menu(menu_bar, tearoff=0)
menu_bar.add_cascade(label="Options", menu=submenu)
submenu.add_command(label="Search and Replace", command=find_and_replace)

root.mainloop()

