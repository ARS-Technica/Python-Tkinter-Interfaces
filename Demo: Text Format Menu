"""
A demonstration of how the text formatting section of a text editor's toolbar should work.
"""

from tkinter import *
from tkinter import ttk
from tkinter.font import families

# Set default font
current_font = "Helvetica"
current_size = 16
is_bold = False
is_italic = False
is_underline = False

# Function to change the font
def change_font():
    global current_font
    global current_size
    font_window = Toplevel()
    font_window.geometry("400x400")
    font_window.title("Font")

    # Create font families listbox
    font_family_label = Label(font_window, text="Font Family", font=("Helvetica", 14))
    font_family_label.pack(pady=10)
    font_families = Listbox(font_window, width=30, height=10, font=("Helvetica", 12))
    font_families.pack()
    scrollbar = Scrollbar(font_window, orient="vertical")
    scrollbar.pack(side="right", fill="y")
    font_families.config(yscrollcommand=scrollbar.set)
    scrollbar.config(command=font_families.yview)

    fonts = families()
    fonts.sort()
    for font_family in fonts:
        font_families.insert(END, font_family)
        if current_font == font_family:
            font_families.selection_set(font_families.size()-1)

    # Create font sizes listbox
    font_size_label = Label(font_window, text="Font Size", font=("Helvetica", 14))
    font_size_label.pack(pady=10)
    font_sizes = Listbox(font_window, width=30, height=10, font=("Helvetica", 12))
    font_sizes.pack()
    scrollbar = Scrollbar(font_window, orient="vertical")
    scrollbar.pack(side="right", fill="y")
    font_sizes.config(yscrollcommand=scrollbar.set)
    scrollbar.config(command=font_sizes.yview)

    sizes = ["8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72"]
    for size in sizes:
        font_sizes.insert(END, size)
        if current_size == int(size):
            font_sizes.selection_set(font_sizes.size()-1)

    # Function to set the font and close the window
    def set_font():
        global current_font
        global current_size
        if font_families.curselection():
            current_font = font_families.get(font_families.curselection())
        if font_sizes.curselection():
            current_size = int(font_sizes.get(font_sizes.curselection()))
        my_text.configure(font=(current_font, current_size))
        font_window.destroy()

    # Create set font button
    set_font_button = Button(font_window, text="Set Font", font=("Helvetica", 14), command=set_font)
    set_font_button.pack(pady=10)

# Function to toggle bold text
def toggle_bold():
    global is_bold
    is_bold = not is_bold
    update_text_formatting()

# Function to toggle italic text
def toggle_italic():
    global is_italic
    is_italic = not is_italic
    update_text_formatting()

# Function to toggle underline text
def toggle_underline():
    global is_underline
    is_underline = not is_underline
    update_text_formatting()

# Function to update text formatting
def update_text_formatting():
    font = (current_font, current_size)
    if is_bold:
        font += ("bold",)
    if is_italic:
        font += ("italic",)
    if is_underline:
        my_text.tag_configure("underline", underline=True)
        my_text.tag_add("underline", my_text.index(INSERT))
    else:
        my_text.tag_remove("underline", "1.0", END)
    my_text.configure(font=font)

# Create the main window
root = Tk()
root.title("Text Editor")

# Create a toolbar with formatting options above the text widget
toolbar = ttk.Frame(root)
toolbar.pack(side="top", fill="x")

# Create a font dropdown menu
font_var = StringVar()
font_var.set(current_font)
font_dropdown = ttk.Combobox(toolbar, textvariable=font_var, values=families(), state="readonly")
font_dropdown.grid(row=0, column=0, padx=5)
font_dropdown.bind("<<ComboboxSelected>>", lambda event: change_font())

# Create bold, italic, and underline buttons
bold_button = Button(toolbar, text="Bold", command=toggle_bold)
italic_button = Button(toolbar, text="Italic", command=toggle_italic)
underline_button = Button(toolbar, text="Underline", command=toggle_underline)

bold_button.grid(row=0, column=1, padx=5)
italic_button.grid(row=0, column=2, padx=5)
underline_button.grid(row=0, column=3, padx=5)

# Create a Text widget
my_text = Text(root, font=(current_font, current_size))
my_text.pack(fill="both", expand=True)

# Start the main event loop
root.mainloop()

