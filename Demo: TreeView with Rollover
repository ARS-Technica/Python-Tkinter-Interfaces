"""
TreeView with Rollover Effects

Create a two column treeview widget in Python's tkinter library.  The two 
columns should be populated with the key, value pairs of a dictionary 
instantiated at the top of the file.  Style the treeview so that the rows 
backgrounds alternate between white and light grey.  When a user selects one 
of the rows, set that row's background to a light blue.  When a mouse hovers 
over a row, change that row's background a darker grey.
"""


# Added Alternating Row Colors and Mouse-Over Effect

import tkinter as tk
from tkinter import ttk

# Example dictionary
regex_code = {
    "Item 1": "https://example.com/1",
    "Item 2": "https://example.com/2",
    "Item 3": "https://example.com/3",
    "Item 4": "https://example.com/4",
}

def on_double_click(event):
    # Get the clicked row's "Item" text and insert it into the text input
    item_id = event.widget.focus()
    item = event.widget.item(item_id)
    item_text = item["text"]  # Get the text from the first column ("Item")
    if item_text:
        regex_entry.delete(0, tk.END)  # Clear the current text
        regex_entry.insert(0, item_text)  # Insert the "Item" text

def create_input_frame(parent):
    # Create a frame to hold the label and text input
    input_frame = ttk.Frame(parent)
    input_frame.grid(row=0, column=0, sticky="ew", padx=5, pady=5)

    # Add a label and entry widget
    label = ttk.Label(input_frame, text="Regular Expression")
    label.grid(row=0, column=0, sticky="w", padx=(0, 5))
    
    global regex_entry
    regex_entry = ttk.Entry(input_frame, width=50)
    regex_entry.grid(row=0, column=1, sticky="ew")

    input_frame.columnconfigure(1, weight=1)  # Make the entry stretchable

def create_directory_frame(parent):
    # Create a frame to hold the Treeview
    directory_frame = ttk.Frame(parent)
    directory_frame.grid(row=1, column=0, sticky="nsew", padx=5, pady=(0, 5))

    # Configure Treeview Style
    style = ttk.Style()
    style.configure("Custom.Treeview", rowheight=25)
    style.map(
        "Custom.Treeview", 
        background=[("selected", "#cce5ff")],  # Highlight color when selected
        foreground=[("selected", "black")],   # Text color when selected
    )
    style.layout(
        "Custom.Treeview", [("Treeview.treearea", {"sticky": "nswe"})]
    )

    directory = ttk.Treeview(directory_frame, style="Custom.Treeview")
    directory.pack(fill="both", expand=True)

    # Configure columns
    directory["columns"] = ("Link",)
    directory.column("#0", width=150, anchor="w")  # The first column (Treeview's text)
    directory.column("Link", width=300, anchor="w")  # The second column
    directory.heading("#0", text="Item")
    directory.heading("Link", text="Link")

    # Bind double-click event
    directory.bind("<Double-Button-1>", on_double_click)


    """
    # Apply alternating row colors and mouse-over effect
    def apply_row_styles():
        for i, child in enumerate(directory.get_children()):
            # Alternate row background colors
            if i % 2 == 0:
                directory.tag_configure("evenrow", background="white")
                directory.item(child, tags=("evenrow",))
            else:
                directory.tag_configure("oddrow", background="#f2f2f2")
                directory.item(child, tags=("oddrow",))
    """

    def apply_row_styles():
        for i, child in enumerate(directory.get_children()):
            if i % 2 == 0:
                directory.tag_configure("evenrow", background="white")
                directory.item(child, tags=("evenrow",))
            else:
                directory.tag_configure("oddrow", background="#f2f2f2")
                directory.item(child, tags=("oddrow",))

     ''' 
    def on_mouse_over(event):
        # Identify the row being hovered over
        item_id = directory.identify_row(event.y)
    
        # Remove the hover tag from all rows to ensure a clean state
        for child in directory.get_children():
            directory.item(child, tags=())
    
        # Add the hover tag to the specific row, preserving original styles
        directory.tag_configure("hover", background="#d0d0d0")  # Adjust highlight color as needed
        directory.item(item_id, tags=("hover",))
    '''        
    
        
    def on_mouse_leave(event):
        # Remove the hover tag from all rows to restore original styles
        for child in directory.get_children():
            directory.item(child, tags=())
            
        # Reapply the original row styles on mouse leave
        apply_row_styles()


    def on_mouse_over(event):
        # Identify the row being hovered over
        item_id = directory.identify_row(event.y)
    
        # Remove the hover tag from all rows to ensure a clean state
        for child in directory.get_children():
            directory.item(child, tags=())
    
        # Add the hover tag to the specific row, preserving original styles
        directory.tag_configure("hover", background="#d9d9d9")  # Adjust highlight color as needed
        directory.item(item_id, tags=("hover",))
 

    """
    # Very close.  Alternating rows diappear on mouseover.
    def on_mouse_over(event):
        # Identify the row being hovered over
        item_id = directory.identify_row(event.y)
    
        # Remove the hover tag from all rows to ensure a clean state
        for child in directory.get_children():
            directory.item(child, tags=())
    
        # Add the hover tag to the specific row, preserving original styles
        directory.tag_configure("hover", background="#d9d9d9")  # Adjust highlight color as needed
        directory.item(item_id, tags=("hover",))
    
    def on_mouse_leave(event):
        # Remove the hover tag from all rows to restore original styles
        for child in directory.get_children():
            directory.item(child, tags=())
    
            # Re-apply the original row styles (even/odd) based on dictionary index
            item_text = directory.item(child)["text"]
            index = list(regex_code.keys()).index(item_text)
            if index % 2 == 0:
                directory.item(child, tags=("evenrow",))
            else:
                directory.item(child, tags=("oddrow",))
    """    

    """
    def on_mouse_over(event):
        # Identify the row being hovered over
        item_id = directory.identify_row(event.y)
    
        # Remove the hover tag from all rows to ensure a clean state
        for child in directory.get_children():
            directory.item(child, tags=())
    
        # Add the hover tag to the specific row, preserving original styles
        directory.tag_configure("hover", background="#d9d9d9")  # Adjust highlight color as needed
        directory.item(item_id, tags=("hover",))
    
    def on_mouse_leave(event):
        # Remove the hover tag from all rows to restore original styles
        for child in directory.get_children():
            directory.item(child, tags=())
    
            # Re-apply the original row styles (even/odd)
            if child % 2 == 0:
                directory.item(child, tags=("evenrow",))
            else:
                directory.item(child, tags=("oddrow",))
    """
    
    """
    def on_mouse_over(event):
        # Identify the row being hovered over
        item_id = directory.identify_row(event.y)
    
        # Remove the hover tag from all rows to ensure clean state
        for child in directory.get_children():
            directory.item(child, tags=())
    
        # Add the hover tag to the specific row, preserving original styles
        directory.tag_configure("hover", background="#d9d9d9")  # Adjust highlight color as needed
        directory.item(item_id, tags=("hover",))
    
    def on_mouse_leave(event):
        # Remove the hover tag from all rows to restore original styles
        for child in directory.get_children():
            directory.item(child, tags=())
    """
    
    """
    # Moused over rows stay highlighted
    def on_mouse_over(event):
        # Highlight the row being moused over
        item_id = directory.identify_row(event.y)
        # Add a new tag for the hovered row, preserving original styles
        directory.tag_configure("hover", background="#d9d9d9")  # Adjust highlight color as needed
        directory.item(item_id, tags=("hover",))
    
    def on_mouse_leave(event):
        # Remove the hover tag from all rows
        for child in directory.get_children():
            directory.item(child, tags=())
    """

    """
    def on_mouse_over(event):
        # Highlight the row being moused over
        item_id = directory.identify_row(event.y)
        for child in directory.get_children():
            directory.tag_configure("hover", background="#d9d9d9")
            directory.item(child, tags=())
        if item_id:
            directory.item(item_id, tags=("hover",))

    def on_mouse_leave(event):
        # Reapply the original row styles on mouse leave
        apply_row_styles()
    """

    directory.bind("<Motion>", on_mouse_over)
    directory.bind("<Leave>", on_mouse_leave)

    # Populate the Treeview with dictionary key-value pairs
    for key, value in regex_code.items():
        directory.insert("", "end", text=key, values=[value])

    # Apply initial row styles
    apply_row_styles()

def create_window():
    global window
    window = tk.Tk()
    window.title("Treeview with Text Input")
    window.geometry("600x400")
    window.resizable(True, True)

    # Configure grid
    window.columnconfigure(0, weight=1)
    window.rowconfigure(1, weight=1)

    # Create input frame and directory frame
    create_input_frame(window)
    create_directory_frame(window)

    # Run the application
    window.mainloop()

if __name__ == "__main__":
    create_window()

