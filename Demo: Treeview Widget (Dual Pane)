"""
Demonstration of two interlinked Treeview Widgets.
In this case, the Treeview Widgets are populated
from a nested dictionary.  The left Treeview displays
the "Category" data from the top-level dictionary,
while the right Treeview displays the key, value
data from the nested dictionary.  This simplifies the
code which would more often be populated by an
external .JSON file.
"""


# Integrated the dual Treeview setup from Demo TreeView Widget (Dual Pane)

import tkinter as tk
from tkinter import ttk

# Example data
categories = {
    "Category 1": {"Item 1": "https://example.com/1", "Item 2": "https://example.com/2"},
    "Category 2": {"Item 3": "https://example.com/3", "Item 4": "https://example.com/4"},
    "Category 3": {"Item 5": "https://example.com/5", "Item 6": "https://example.com/6"},
}

def on_category_select(event):
    """Handles selection in the left Treeview (category_tree)."""
    selected_item = category_tree.focus()
    if not selected_item:
        return

    selected_category = category_tree.item(selected_item, "text")
    display_key_value_pairs(selected_category)

def display_key_value_pairs(category):
    """Populates the right Treeview (key_value_tree) based on the selected category."""
    key_value_tree.delete(*key_value_tree.get_children())  # Clear existing data
    if category in categories:
        for key, value in categories[category].items():
            key_value_tree.insert("", "end", text=key, values=(value,))

def create_category_treeview(parent):
    """Creates the left Treeview (category_tree) to display categories."""
    frame = ttk.Frame(parent)
    frame.grid(row=1, column=0, sticky="nsew", padx=(5, 5), pady=5)

    tree = ttk.Treeview(frame, show="tree", selectmode="browse")
    tree.grid(row=0, column=0, sticky="nsew")

    scrollbar = ttk.Scrollbar(frame, orient="vertical", command=tree.yview)
    scrollbar.grid(row=0, column=1, sticky="ns")
    tree.configure(yscrollcommand=scrollbar.set)

    frame.columnconfigure(0, weight=1)
    frame.rowconfigure(0, weight=1)

    # Populate categories
    for category in categories.keys():
        tree.insert("", "end", text=category)

    return tree

def create_key_value_treeview(parent):
    """Creates the right Treeview (key_value_tree) to display key-value pairs."""
    frame = ttk.Frame(parent)
    frame.grid(row=1, column=1, sticky="nsew", padx=(5, 5), pady=5)

    tree = ttk.Treeview(frame, columns=("Value",), show="tree headings", selectmode="browse")
    tree.heading("#0", text="Key", anchor="w")
    tree.heading("Value", text="Value", anchor="w")
    tree.column("#0", width=150, anchor="w")
    tree.column("Value", width=300, anchor="w")

    tree.grid(row=0, column=0, sticky="nsew")

    scrollbar = ttk.Scrollbar(frame, orient="vertical", command=tree.yview)
    scrollbar.grid(row=0, column=1, sticky="ns")
    tree.configure(yscrollcommand=scrollbar.set)

    frame.columnconfigure(0, weight=1)
    frame.rowconfigure(0, weight=1)

    return tree

def create_input_frame(parent):
    """Creates a frame with a text input for regular expressions."""
    input_frame = ttk.Frame(parent)
    input_frame.grid(row=0, column=0, columnspan=2, sticky="ew", padx=5, pady=5)

    label = ttk.Label(input_frame, text="Regular Expression:")
    label.grid(row=0, column=0, sticky="w", padx=(0, 5))

    global regex_entry
    regex_entry = ttk.Entry(input_frame, width=50)
    regex_entry.grid(row=0, column=1, sticky="ew")

    input_frame.columnconfigure(1, weight=1)

def configure_main_window(window):
    """Configures the main application window layout."""
    window.columnconfigure(0, weight=1)
    window.columnconfigure(1, weight=1)
    window.rowconfigure(1, weight=1)

def create_window():
    """Creates and launches the main application window."""
    global category_tree, key_value_tree

    window = tk.Tk()
    window.title("RegEx Editor with Two Treeviews")
    window.geometry("800x400")
    configure_main_window(window)

    create_input_frame(window)
    category_tree = create_category_treeview(window)
    key_value_tree = create_key_value_treeview(window)

    # Bind events
    category_tree.bind("<<TreeviewSelect>>", on_category_select)

    # Start the main event loop
    window.mainloop()

if __name__ == "__main__":
    create_window()

