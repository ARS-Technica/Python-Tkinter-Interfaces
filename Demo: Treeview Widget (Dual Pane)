"""
Demonstration of two interlinked Treeview Widgets.
In this case, the Treeview Widgets are populated
from a nested dictionary.  The left Treeview displays
the "Category" data from the top-level dictionary,
while the right Treeview displays the key, value
data from the nested dictionary.  This simplifies the
code which would more often be populated by an
external .JSON file.
"""


# Eliminated the extra column and ensure that the "Key" and "Value" columns fill the entire width of the Treeview widget on the right


import tkinter as tk
from tkinter import ttk

def update_key_value_tree(event):
    selected_category = event.widget.selection()[0]
    category_name = event.widget.item(selected_category, "text")

    key_value_tree.delete(*key_value_tree.get_children())
    for key, value in data[category_name].items():
        key_value_tree.insert("", "end", values=(key, value))

# Sample dictionary data
data = {
    "Category 1": {
        "key1": "value1",
        "key2": "value2"
    },
    "Category 2": {
        "key3": "value3",
        "key4": "value4"
    },
    # ... other categories
}

# Create the main window
root = tk.Tk()

# Create the category Treeview
category_tree = ttk.Treeview(root)
category_tree.heading("#0", text="Category")
category_tree.pack(side="left", fill="y")

# Populate the category Treeview
for category in data:
    category_tree.insert("", "end", text=category)

# Create the key-value Treeview
key_value_tree = ttk.Treeview(root, columns=("Key", "Value"), show="headings")  # "show=headings" removes the default #0 column
key_value_tree.heading("Key", text="Key")
key_value_tree.heading("Value", text="Value")

# Set columns to fill the widget width
key_value_tree.column("Key", anchor="w", width=150, stretch=True)
key_value_tree.column("Value", anchor="w", width=150, stretch=True)

key_value_tree.pack(side="right", fill="both", expand=True)

# Bind the selection event to the category Treeview
category_tree.bind("<<TreeviewSelect>>", update_key_value_tree)

root.mainloop()

