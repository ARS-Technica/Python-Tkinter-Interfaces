"""
After repeated failures to find a method of reliably justifying text in Tknter's 
text widget, I'm now attempting to create a simple Notepad application in Python 
using the wxPython TextCtrl widget to support justified text alignment through the 
StyleTextCtrl class.  I found this suggestion on Reddit.

Having never used wxPython, this code is going to be a blend of Stackforum code and
ChatGPT suggestions.
"""


import wx
import wx.richtext as rt

def create_menu(frame):
    menubar = wx.MenuBar()
    
    file_menu = wx.Menu()
    file_menu.Append(wx.ID_NEW, '&New\tCtrl+N')
    file_menu.Append(wx.ID_OPEN, '&Open\tCtrl+O')
    file_menu.Append(wx.ID_SAVE, '&Save\tCtrl+S')
    file_menu.Append(wx.ID_SAVEAS, 'Save &As\tCtrl+Shift+S')
    file_menu.AppendSeparator()
    file_menu.Append(wx.ID_EXIT, '&Exit\tCtrl+Q')
    
    menubar.Append(file_menu, '&File')
    frame.SetMenuBar(menubar)
    
    frame.Bind(wx.EVT_MENU, on_new, id=wx.ID_NEW)
    frame.Bind(wx.EVT_MENU, on_open, id=wx.ID_OPEN)
    frame.Bind(wx.EVT_MENU, on_save, id=wx.ID_SAVE)
    frame.Bind(wx.EVT_MENU, on_save_as, id=wx.ID_SAVEAS)
    frame.Bind(wx.EVT_MENU, on_exit, id=wx.ID_EXIT)

def on_new(event):
    text_ctrl.Clear()

def on_open(event):
    openFileDialog = wx.FileDialog(frame, "Open", "", "", 
                                    "Text files (*.txt)|*.txt", 
                                    wx.FD_OPEN | wx.FD_FILE_MUST_EXIST)
    if openFileDialog.ShowModal() == wx.ID_CANCEL:
        return
    
    filepath = openFileDialog.GetPath()
    with open(filepath, 'r') as file:
        text_ctrl.SetValue(file.read())

def on_save(event):
    save_file()

def on_save_as(event):
    save_file(save_as=True)

def save_file(save_as=False):
    fileDialog = wx.FileDialog(frame, "Save As" if save_as else "Save", "", "", 
                               "Text files (*.txt)|*.txt", 
                               wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT)
    if save_as or not hasattr(frame, 'current_file'):
        if fileDialog.ShowModal() == wx.ID_CANCEL:
            return
        frame.current_file = fileDialog.GetPath()

    with open(frame.current_file, 'w') as file:
        file.write(text_ctrl.GetValue())

def on_exit(event):
    frame.Close()

def on_justify(event):
    # Apply justified alignment to the selected text or entire text if none selected
    if text_ctrl.HasSelection():
        start, end = text_ctrl.GetSelection()
    else:
        start, end = 0, text_ctrl.GetLastPosition()
    
    text_ctrl.SetSelection(start, end)
    attr = rt.RichTextAttr()
    attr.SetAlignment(wx.TEXT_ALIGNMENT_JUSTIFIED)
    text_ctrl.SetStyle(start, end, attr)

def main():
    app = wx.App()
    global frame
    frame = wx.Frame(None, title='Simple Notepad', size=(800, 600))
    
    panel = wx.Panel(frame)
    vbox = wx.BoxSizer(wx.VERTICAL)
    
    global text_ctrl
    text_ctrl = create_text_ctrl(panel)
    vbox.Add(text_ctrl, 1, wx.EXPAND | wx.ALL, 5)
    
    justify_button = wx.Button(panel, label="Justify Text")
    vbox.Add(justify_button, 0, wx.ALIGN_CENTER | wx.ALL, 5)
    justify_button.Bind(wx.EVT_BUTTON, on_justify)
    
    panel.SetSizer(vbox)
    
    create_menu(frame)
    frame.Show(True)
    app.MainLoop()

def create_text_ctrl(panel):
    text_ctrl = rt.RichTextCtrl(panel, style=wx.TE_MULTILINE)
    text_ctrl.SetMinSize((800, 600))
    
    # Set default text alignment to justified
    para_style = rt.RichTextAttr()
    para_style.SetAlignment(wx.TEXT_ALIGNMENT_JUSTIFIED)
    text_ctrl.SetDefaultStyle(para_style)
    
    return text_ctrl

if __name__ == '__main__':
    main()

